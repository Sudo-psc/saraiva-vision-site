#!/bin/bash

# Script para testar integra√ß√£o WordPress completa
echo "üß™ TESTANDO INTEGRA√á√ÉO WORDPRESS COMPLETA"
echo "=========================================="
echo

# 1. Verificar servidor mock WordPress
echo "1. üì° Verificando servidor WordPress Mock..."
if curl -s "http://localhost:8081/wp-json/wp/v2" > /dev/null 2>&1; then
    echo "   ‚úÖ Servidor WordPress Mock ativo na porta 8081"
    
    # Testar posts
    POST_COUNT=$(curl -s "http://localhost:8081/wp-json/wp/v2/posts" | jq 'length' 2>/dev/null || echo "0")
    echo "   üìÑ Posts dispon√≠veis: $POST_COUNT"
    
    # Mostrar primeiro post como exemplo
    if [ "$POST_COUNT" -gt "0" ]; then
        echo "   üìù Exemplo de post:"
        curl -s "http://localhost:8081/wp-json/wp/v2/posts?per_page=1" | jq '.[0] | {id: .id, title: .title.rendered, status: .status}' 2>/dev/null || echo "   ‚ö†Ô∏è Erro ao processar dados do post"
    fi
else
    echo "   ‚ùå Servidor WordPress Mock n√£o est√° respondendo"
    echo "   üí° Iniciando servidor mock..."
    node mock-wordpress-server.js &
    sleep 3
    echo "   üîÑ Tentando novamente..."
    if curl -s "http://localhost:8081/wp-json/wp/v2" > /dev/null 2>&1; then
        echo "   ‚úÖ Servidor WordPress Mock iniciado com sucesso"
    else
        echo "   ‚ùå Falha ao iniciar servidor WordPress Mock"
    fi
fi

echo
echo "2. üåê Verificando configura√ß√£o da integra√ß√£o..."

# Verificar vari√°veis de ambiente
if [ -f ".env" ]; then
    echo "   ‚úÖ Arquivo .env encontrado"
    
    WP_URL=$(grep "VITE_WORDPRESS_API_URL" .env | cut -d'=' -f2)
    CONSTRUCTION=$(grep "VITE_BLOG_UNDER_CONSTRUCTION" .env | cut -d'=' -f2)
    
    echo "   üîó WordPress API URL: $WP_URL"
    echo "   üèóÔ∏è P√°gina em constru√ß√£o: $CONSTRUCTION"
    
    if [ "$CONSTRUCTION" = "0" ]; then
        echo "   ‚úÖ Overlay de constru√ß√£o desabilitado"
    else
        echo "   ‚ö†Ô∏è Overlay de constru√ß√£o ainda ativo"
    fi
else
    echo "   ‚ö†Ô∏è Arquivo .env n√£o encontrado"
fi

echo
echo "3. ‚öõÔ∏è Verificando arquivo de configura√ß√£o WordPress..."

if [ -f "src/lib/wordpress.js" ]; then
    echo "   ‚úÖ Arquivo wordpress.js encontrado"
    
    # Verificar se as fun√ß√µes principais existem
    if grep -q "fetchPosts" src/lib/wordpress.js; then
        echo "   ‚úÖ Fun√ß√£o fetchPosts dispon√≠vel"
    fi
    
    if grep -q "checkWordPressConnection" src/lib/wordpress.js; then
        echo "   ‚úÖ Fun√ß√£o checkWordPressConnection dispon√≠vel"
    fi
    
    if grep -q "API_BASE_URL" src/lib/wordpress.js; then
        echo "   ‚úÖ Configura√ß√£o API_BASE_URL definida"
    fi
else
    echo "   ‚ùå Arquivo wordpress.js n√£o encontrado"
fi

echo
echo "4. üìù Verificando componente BlogPage..."

if [ -f "src/pages/BlogPage.jsx" ]; then
    echo "   ‚úÖ Arquivo BlogPage.jsx encontrado"
    
    # Verificar se o overlay foi removido
    if grep -q "P√°gina em constru√ß√£o" src/pages/BlogPage.jsx; then
        echo "   ‚ö†Ô∏è Ainda h√° refer√™ncias √† p√°gina em constru√ß√£o"
    else
        echo "   ‚úÖ Overlay de constru√ß√£o removido"
    fi
    
    # Verificar imports do WordPress
    if grep -q "from.*wordpress" src/pages/BlogPage.jsx; then
        echo "   ‚úÖ Imports do WordPress configurados"
    fi
else
    echo "   ‚ùå Arquivo BlogPage.jsx n√£o encontrado"
fi

echo
echo "5. üåç Simulando requisi√ß√£o do React para WordPress..."

# Simular o que o React faria
echo "   üì° Fazendo requisi√ß√£o para /wp-json/wp/v2/posts..."
HTTP_STATUS=$(curl -s -o /tmp/wp_response.json -w "%{http_code}" "http://localhost:8081/wp-json/wp/v2/posts?per_page=3&_embed=true")

if [ "$HTTP_STATUS" = "200" ]; then
    echo "   ‚úÖ Requisi√ß√£o bem-sucedida (HTTP $HTTP_STATUS)"
    
    # Verificar estrutura dos dados
    if command -v jq > /dev/null 2>&1; then
        POST_COUNT=$(jq 'length' /tmp/wp_response.json 2>/dev/null || echo "0")
        echo "   üìä Posts retornados: $POST_COUNT"
        
        if [ "$POST_COUNT" -gt "0" ]; then
            echo "   üìã Estrutura do primeiro post:"
            jq '.[0] | {id: .id, title: .title.rendered, excerpt: (.excerpt.rendered | gsub("<[^>]*>"; "") | .[0:100] + "..."), date: .date, status: .status, _embedded: (._embedded | keys)}' /tmp/wp_response.json 2>/dev/null || echo "   ‚ö†Ô∏è Erro ao analisar estrutura"
        fi
    else
        echo "   ‚ö†Ô∏è jq n√£o dispon√≠vel para an√°lise detalhada"
    fi
else
    echo "   ‚ùå Requisi√ß√£o falhou (HTTP $HTTP_STATUS)"
fi

# Limpeza
rm -f /tmp/wp_response.json

echo
echo "üìä RESUMO DA INTEGRA√á√ÉO"
echo "======================"
echo "‚úÖ Servidor mock funcionando: $([ "$POST_COUNT" -gt "0" ] && echo "SIM" || echo "N√ÉO")"
echo "‚úÖ Overlay removido: $([ ! -f "src/pages/BlogPage.jsx" ] || ! grep -q "P√°gina em constru√ß√£o" src/pages/BlogPage.jsx && echo "SIM" || echo "N√ÉO")"
echo "‚úÖ API configurada: $([ -f "src/lib/wordpress.js" ] && echo "SIM" || echo "N√ÉO")"
echo "‚úÖ Vari√°veis de ambiente: $([ "$CONSTRUCTION" = "0" ] && echo "OK" || echo "VERIFICAR")"

echo
echo "üéØ PR√ìXIMOS PASSOS:"
echo "1. Abrir http://localhost:3003/blog no navegador"
echo "2. Verificar se os posts est√£o sendo exibidos"
echo "3. Verificar console do navegador para erros"
echo