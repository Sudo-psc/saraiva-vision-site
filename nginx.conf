server {
    listen 80;
    listen [::]:80;
    server_name saraivavision.com.br www.saraivavision.com.br;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
        default_type text/plain;
    }

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name saraivavision.com.br www.saraivavision.com.br;
    server_tokens off;
    # Standardized headers via includes (no inline headers here)
    include /etc/nginx/includes/security-headers.conf;
    include /etc/nginx/includes/csp.conf;

    set $cors_origin "";
    if ($http_origin ~* "^https?://(www\\.)?saraivavision\\.com\\.br$") {
        set $cors_origin $http_origin;
    }
    if ($http_origin ~* "^https?://saraivavision\\.vercel\\.app$") {
        set $cors_origin $http_origin;
    }
    if ($http_origin ~* "^http://localhost(:[0-9]{2,5})?$") {
        set $cors_origin $http_origin;
    }

    ssl_certificate /etc/letsencrypt/live/saraivavision.com.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/saraivavision.com.br/privkey.pem;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_prefer_server_ciphers off;

    root /var/www/saraivavision/current;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;

    location = /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }

    # Avoid recursion on /index.html and disable cache for HTML
    location = /index.html {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        try_files $uri =404;
    }

    location ~* \.html$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        # Ensure security headers/CSP still apply within this location
        include /etc/nginx/includes/security-headers.conf;
        include /etc/nginx/includes/csp.conf;
        try_files $uri $uri/ /index.html;
    }

    # Ads endpoint fallback (for ad-blocker compatibility) - BEFORE SPA fallback
    location = /ads {
        default_type application/json;
        access_log off;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        include /etc/nginx/includes/security-headers.conf;
        include /etc/nginx/includes/csp.conf;
        return 200 '{"status":"ok","message":"ads blocked or disabled"}';
    }

    # Web Vitals endpoint fallback (accept GET/OPTIONS/POST)
    location = /web-vitals {
        access_log off;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS, POST" always;
        add_header Access-Control-Allow-Headers "Content-Type" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Content-Type application/json always;
        include /etc/nginx/includes/security-headers.conf;
        include /etc/nginx/includes/csp.conf;

        if ($request_method = 'OPTIONS') {
            return 204;
        }
        if ($request_method = 'POST') {
            return 204;
        }
        return 200 '{"cls":0,"fid":0,"lcp":0}';
    }

    # Static assets (immutable hashed filenames from Vite)
    location ~* \.(?:css|png|jpg|jpeg|gif|ico|svg|woff2?|ttf|eot|otf|mjs|js|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        # Ensure core security headers on asset responses too
        include /etc/nginx/includes/security-headers.conf;
        try_files $uri =404;
    }

    # Media files (audio/video)
    location ~* \.(?:mp3|m4a|aac|ogg|wav|mp4|webm)$ {
        expires 30d;
        add_header Cache-Control "public";
        include /etc/nginx/includes/security-headers.conf;
        try_files $uri =404;
    }

    # Robots and sitemap
    location = /robots.txt { access_log off; log_not_found off; try_files $uri =404; }
    location = /sitemap.xml { access_log off; try_files $uri =404; }

    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy WordPress when accessed via /cms/ (subdirectory mapping)
    location /cms/ {
        proxy_pass http://127.0.0.1:8080/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/ {
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Vary' 'Origin' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

        # Ensure security headers/CSP also apply on API responses
        include /etc/nginx/includes/security-headers.conf;
        include /etc/nginx/includes/csp.conf;

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin;
            add_header 'Vary' 'Origin';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # WordPress REST API proxy (targeted caching for GETs by client)
    location /wp-json/ {
        proxy_pass http://127.0.0.1:8083;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Cache-Control "public, max-age=300" always;
        include /etc/nginx/includes/security-headers.conf;
        include /etc/nginx/includes/csp.conf;
    }

    # WordPress Admin proxy (wp-admin and wp-login)
    location ~ ^/(wp-admin|wp-login\.php|wp-includes|wp-content) {
        proxy_pass http://127.0.0.1:8083;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port 443;

        # Handle WordPress redirects that point to the upstream host/port
        # Normalize both 127.0.0.1:8083 and localhost:8083 to external HTTPS
        proxy_redirect ~^http://(localhost|127\.0\.0\.1):8083(/.*)$ https://$host$2;
        proxy_redirect ~^https://(www\.)?saraivavision\.com\.br:8083(/.*)$ https://www.saraivavision.com.br$2;

        # WordPress admin needs different cache settings
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        include /etc/nginx/includes/security-headers.conf;
        include /etc/nginx/includes/csp.conf;
    }
}
