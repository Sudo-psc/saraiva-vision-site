version: "3.8"

services:
  # Frontend Service with custom development server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: build
    container_name: saraiva-frontend
    ports:
      - "3002:3002"
      - "5173:5173"
    volumes:
      - ./src:/app/src:cached
      - ./public:/app/public:cached
      - ./index.html:/app/index.html:cached
      - ./vite.config.js:/app/vite.config.js:cached
      - ./server-dev.js:/app/server-dev.js:cached
      - ./package.json:/app/package.json:cached
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://api:3001
      - VITE_WORDPRESS_URL=http://wordpress:8083
      - FRONTEND_PORT=3002
    command: ["node", "server-dev.js"]
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3002/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      api:
        condition: service_healthy
    networks:
      - internal

  # API Service with health checks
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: saraiva-api
    ports:
      - "3001:3001"
      - "9229:9229"
    volumes:
      - ./server.js:/app/server.js:cached
      - ./api:/app/api:cached
      - ./.env.development:/app/.env:cached
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
      - WORDPRESS_URL=http://wordpress:8083
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    command: ["node", "--inspect=0.0.0.0:9229", "server.js"]
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://0.0.0.0:3001/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal

  # WordPress Service with health check plugin
  wordpress:
    build:
      context: .
      dockerfile: Dockerfile.wordpress
    container_name: saraiva-wordpress
    volumes:
      - ./wordpress-local:/var/www/html:cached
      - wordpress_data:/var/www/html/wp-content/uploads
      - ./wordpress-plugins:/var/www/html/wp-content/plugins/saraiva-vision:cached
    environment:
      - WORDPRESS_DEBUG=true
      - WORDPRESS_DB_HOST=localhost
      - WORDPRESS_DB_USER=wordpress
      - WORDPRESS_DB_PASSWORD=wordpress
      - WORDPRESS_DB_NAME=wordpress
      - WP_HOME=http://localhost:8083
      - WP_SITEURL=http://localhost:8083
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://0.0.0.0:8083/wp-json/wp/v2/posts",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal

  # Nginx Reverse Proxy with health monitoring
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: saraiva-nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:cached
      - ./nginx-configs:/etc/nginx/conf.d:cached
      - ./nginx-logs:/var/log/nginx:cached
      - /etc/letsencrypt:/etc/letsencrypt:ro
    environment:
      - NGINX_HOST=localhost
      - FRONTEND_HOST=frontend:3002
      - API_HOST=api:3001
      - WORDPRESS_HOST=wordpress:8083
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:80/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
      wordpress:
        condition: service_healthy
    networks:
      - internal

  # Database Service (MySQL for production support)
  db:
    image: mysql:8.0
    container_name: saraiva-db
    restart: unless-stopped
    environment:
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=wordpress
      - MYSQL_PASSWORD=wordpress
      - MYSQL_ROOT_PASSWORD=wordpress_root
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-backup:/backup:rw
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "wordpress",
          "-pwordpress",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - internal

  # Redis Service for caching
  redis:
    image: redis:7-alpine
    container_name: saraiva-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - internal

  # Health Monitoring Service
  health-monitor:
    image: curlimages/curl:latest
    container_name: saraiva-health-monitor
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
      wordpress:
        condition: service_healthy
      nginx:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Starting health monitoring...' &&
        while true; do
          echo '=== Health Check at $$(date) ===' &&
          curl -f http://nginx/health || echo 'Nginx unhealthy' &&
          curl -f http://frontend:3002/health || echo 'Frontend unhealthy' &&
          curl -f http://api:3001/api/health || echo 'API unhealthy' &&
          curl -f http://wordpress:8083/wp-json/saraiva-vision/v1/health || echo 'WordPress unhealthy' &&
          curl -f http://redis:6379/ping || echo 'Redis unhealthy' &&
          echo '=== All checks completed ===' &&
          sleep 30;
        done
      "
    networks:
      - internal

  # Development Tools
  dev-tools:
    image: alpine:latest
    container_name: saraiva-dev-tools
    command: >
      sh -c "
        apk add --no-cache curl wget dig telnet netcat-openbsd &&
        echo 'Development tools container started...' &&
        tail -f /dev/null
      "
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  wordpress_data:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
