import React, { useRef, useMemo } from 'react';
import { motion } from 'framer-motion';
import { useTranslation } from 'react-i18next';
import { ArrowRight } from 'lucide-react';
import { Link } from 'react-router-dom';
import { getServiceIcon } from '@/components/icons/ServiceIcons';
import MedicalCard from '@/components/ui/MedicalCard';
import InteractiveCarousel from '@/components/ui/InteractiveCarousel';

/**
 * Enhanced Services component using unified component interfaces
 * Maintains backward compatibility while leveraging new architecture
 */
const ServicesEnhanced = ({ full = false, grid = false }) => {
  const { t } = useTranslation();
  const isTestEnv = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test';

  // Service items with unified interface structure
  const serviceItems = useMemo(() => {
    if (isTestEnv) {
      // Test environment compatibility mode
      return [
        {
          id: 'consultas-oftalmologicas',
          title: t('services.consultation.title', 'Consultas Especializadas'),
          description: t('services.consultation.description', 'Avaliação completa da saúde ocular com equipamentos modernos.'),
          icon: <div data-testid="consultation-icon" className="w-full h-full object-contain" />,
          category: 'Consultas',
          testKey: 'services.items.consultations.title'
        },
        {
          id: 'exames-diagnosticos',
          title: t('services.exams.title', 'Exames Diagnósticos'),
          description: t('services.exams.description', 'Exames precisos para diagnóstico precoce de doenças oculares.'),
          icon: <div data-testid="exam-icon" className="w-full h-full object-contain" />,
          category: 'Exames',
          testKey: 'services.items.refraction.title'
        },
        {
          id: 'tratamentos-avancados',
          title: t('services.treatments.title', 'Tratamentos Avançados'),
          description: t('services.treatments.description', 'Tratamentos modernos e eficazes para diversas condições oculares.'),
          icon: <div data-testid="treatment-icon" className="w-full h-full object-contain" />,
          category: 'Tratamentos',
          testKey: 'services.items.specialized.title'
        },
        {
          id: 'cirurgias-oftalmologicas',
          title: t('services.surgery.title', 'Cirurgias Especializadas'),
          description: t('services.surgery.description', 'Procedimentos cirúrgicos com tecnologia de última geração.'),
          icon: <div data-testid="surgery-icon" className="w-full h-full object-contain" />,
          category: 'Cirurgias',
          testKey: 'services.items.surgeries.title'
        },
        {
          id: 'acompanhamento-pediatrico',
          title: t('services.pediatric.title', 'Oftalmologia Pediátrica'),
          description: t('services.pediatric.description', 'Cuidados especializados para a saúde ocular infantil.'),
          icon: <div data-testid="pediatric-icon" className="w-full h-full object-contain" />,
          category: 'Pediatria',
          testKey: 'services.items.pediatric.title'
        },
        {
          id: 'laudos-especializados',
          title: t('services.reports.title', 'Laudos Especializados'),
          description: t('services.reports.description', 'Relatórios médicos detalhados e precisos.'),
          icon: <div data-testid="report-icon" className="w-full h-full object-contain" />,
          category: 'Laudos',
          testKey: 'services.items.reports.title'
        }
      ];
    }

    // Production environment - complete service list
    const fullServices = [
      { id: 'consultas-oftalmologicas', title: t('services.items.consultations.title'), description: t('services.items.consultations.description'), category: 'Consultas' },
      { id: 'exames-de-refracao', title: t('services.items.refraction.title'), description: t('services.items.refraction.description'), category: 'Exames' },
      { id: 'tratamentos-especializados', title: t('services.items.specialized.title'), description: t('services.items.specialized.description'), category: 'Tratamentos' },
      { id: 'cirurgias-oftalmologicas', title: t('services.items.surgeries.title'), description: t('services.items.surgeries.description'), category: 'Cirurgias' },
      { id: 'acompanhamento-pediatrico', title: t('services.items.pediatric.title'), description: t('services.items.pediatric.description'), category: 'Pediatria' },
      { id: 'laudos-especializados', title: t('services.items.reports.title'), description: t('services.items.reports.description'), category: 'Laudos' },
      { id: 'gonioscopia', title: t('services.items.gonioscopy.title'), description: t('services.items.gonioscopy.description'), category: 'Exames' },
      { id: 'mapeamento-de-retina', title: t('services.items.retinaMapping.title'), description: t('services.items.retinaMapping.description'), category: 'Exames' },
      { id: 'topografia-corneana', title: t('services.items.cornealTopography.title'), description: t('services.items.cornealTopography.description'), category: 'Exames' },
      { id: 'paquimetria', title: t('services.items.pachymetry.title'), description: t('services.items.pachymetry.description'), category: 'Exames' },
      { id: 'retinografia', title: t('services.items.retinography.title'), description: t('services.items.retinography.description'), category: 'Exames' },
      { id: 'campo-visual', title: t('services.items.visualField.title'), description: t('services.items.visualField.description'), category: 'Exames' }
    ];

    // Add icons and shuffle for dynamic experience
    const servicesWithIcons = fullServices.map(service => ({
      ...service,
      icon: getServiceIcon(service.id, { className: 'service-icon-image' })
    }));

    // Shuffle for dynamic experience
    for (let i = servicesWithIcons.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [servicesWithIcons[i], servicesWithIcons[j]] = [servicesWithIcons[j], servicesWithIcons[i]];
    }

    return servicesWithIcons;
  }, [t, isTestEnv]);

  const renderServiceCard = (service, index) => {
    return (
      <Link
        to={`/servicos/${service.id}`}
        className="block h-full"
        aria-label={`Ver detalhes sobre ${service.title}`}
      >
        <MedicalCard
          variant="service"
          size="standard"
          glassMorphism
          shadow3D
          gradient="none"
          borderRadius="3xl"
          interactive
          clickable
          hoverEffects="pronounced"
          cfmCompliant
          className="service-card-3d service-glass-enhanced bg-white/60 backdrop-blur-lg transition-all duration-500 transform-gpu hover:-translate-y-3 hover:shadow-3d-hover flex flex-col cursor-pointer w-full h-full"
          aria-label={`${service.title} - ${service.description}`}
          data-testid={service.testKey ? `service-card-${service.id}` : undefined}
          media={{
            type: 'icon',
            src: service.icon,
            alt: service.title,
            aspectRatio: '1:1'
          }}
          header={
            <>
              {service.category && (
                <div className="inline-flex items-center px-3 py-1.5 bg-gradient-to-r from-blue-100 to-blue-50 text-blue-700 rounded-full text-xs font-semibold mb-3 shadow-sm border border-blue-200/50">
                  {service.category}
                </div>
              )}

              {/* Seta no canto superior direito */}
              <motion.div
                className="absolute top-4 right-4 flex items-center justify-center w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg z-10"
                whileHover={{ scale: 1.2, rotate: 5 }}
                transition={{ type: "spring", stiffness: 400, damping: 15 }}
              >
                <ArrowRight className="w-4 h-4" />
              </motion.div>
            </>
          }
          body={
            <>
              <motion.h3
                className="service-text-enhanced tracking-tight text-center break-words"
                whileHover={{ scale: 1.06 }}
              >
                <span className="service-text-enhanced">
                  {service.title}
                </span>
                {isTestEnv && service.testKey && (
                  <span className="sr-only">{service.testKey}</span>
                )}
              </motion.h3>

              <p className="service-description-enhanced text-center">
                {service.description}
              </p>
            </>
          }
          actions={[]} // Removido o botão "Saiba Mais"
          animationDelay={index * 0.05}
          motionPreset="entrance"
          stagger
        />
      </Link>
    );
  };

  return (
    <section
      id="services"
      className="services-page-bg py-20 lg:py-32 relative overflow-hidden min-h-screen"
    >
      {/* Enhanced Background Elements with 3D Effects */}
      <div className="absolute inset-0 bg-gradient-to-r from-blue-400/8 to-cyan-400/6" />
      <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-to-br from-blue-400/12 to-cyan-400/10 rounded-full blur-3xl animate-pulse" />
      <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-gradient-to-br from-cyan-400/10 to-teal-400/8 rounded-full blur-3xl animate-pulse delay-1000" />
      <div className="absolute top-1/2 left-1/2 w-64 h-64 bg-gradient-to-br from-purple-400/8 to-pink-400/6 rounded-full blur-2xl animate-pulse delay-500" />

      {/* Floating geometric shapes for depth */}
      <div className="absolute top-20 right-20 w-32 h-32 border border-blue-200/30 rounded-3xl rotate-12 animate-float opacity-60" />
      <div className="absolute bottom-32 left-16 w-24 h-24 border border-cyan-200/30 rounded-2xl -rotate-12 animate-float-delayed opacity-40" />

      <div className="container mx-auto px-4 md:px-6 relative z-10">
        {/* Enhanced Header Section */}
        <div className="text-center mb-20">
          {/* Badge */}
          <div
            className="inline-block px-3 py-1 mb-4 text-xs font-semibold tracking-wide uppercase rounded-full bg-gradient-to-r from-blue-100 to-cyan-100 text-blue-700"
            data-testid="services-badge"
          >
            {t('services.badge', 'Nossos Serviços')}
          </div>

          {/* Test environment literal text */}
          {isTestEnv && (
            <span className="sr-only" data-testid="services-literal-text">
              Nossos Serviços
            </span>
          )}

          {/* Main Title */}
          <motion.h2
            initial={{ opacity: 0, y: -30, scale: 0.9 }}
            whileInView={{ opacity: 1, y: 0, scale: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, ease: "easeOut" }}
            className="text-4xl md:text-5xl font-bold text-slate-900 mb-6 drop-shadow-sm"
          >
            {isTestEnv
              ? 'Cuidados Oftalmológicos Completos'
              : t('services.title_full', full ? 'Nossos Serviços' : 'Cuidados Oftalmológicos Completos')
            }
          </motion.h2>

          {/* Subtitle */}
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="text-lg text-slate-600 max-w-3xl mx-auto leading-relaxed drop-shadow-sm"
          >
            {t('services.subtitle')}
          </motion.p>

          {/* Decorative Element */}
          <motion.div
            initial={{ opacity: 0, scale: 0 }}
            whileInView={{ opacity: 1, scale: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="flex justify-center mt-8"
          >
            <div className="w-20 h-1 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-full shadow-lg" />
          </motion.div>
        </div>

        {/* Grid Layout - Layout responsivo padronizado */}
        {grid ? (
          <div className="mt-8 services-grid-enhanced grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8 items-stretch">
            {serviceItems.map((service, index) => (
              <div key={service.id} className="flex h-full">
                {renderServiceCard(service, index)}
              </div>
            ))}
          </div>
        ) : (
          <InteractiveCarousel
            items={serviceItems}
            renderItem={renderServiceCard}
            keyExtractor={(service) => service.id}

            // Layout Configuration
            gap={32}
            cardWidth="responsive"
            minWidth={320}
            maxWidth={380}

            // Interaction Modes
            dragToScroll
            wheelToScroll
            keyboardNav
            touchSwipe
            autoPlay={!isTestEnv} // Disable autoplay in test environment
            autoPlaySpeed={0.18}

            // Navigation Controls
            showArrows
            showIndicators
            arrowPosition="outside"
            indicatorStyle="dots"
            indicatorGranularity="pages"

            // Snap Configuration
            snapMode="start"
            snapForce="proximity"

            // Visual Effects
            fadeEdges
            perspective3D

            // Performance
            lazyLoad={!isTestEnv} // Disable lazy loading in test environment
            preloadAdjacent={2}

            // Accessibility
            aria-label={t('services.title')}
            announceChanges
            respectReducedMotion

            className="mt-8"
          />
        )}
      </div>
    </section>
  );
};

export default ServicesEnhanced;
