#!/bin/bash

# Script de Deploy de Produ√ß√£o - Saraiva Vision
# Inclui SSL, monitoramento e otimiza√ß√µes de produ√ß√£o

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Banner
echo "üöÄ DEPLOY DE PRODU√á√ÉO - SARAIVA VISION BLOG"
echo "=============================================="
echo ""

# 1. Verificar servi√ßos
log_step "1. Verificando servi√ßos essenciais..."

services=("nginx" "php8.3-fpm" "mysql")
for service in "${services[@]}"; do
    if systemctl is-active --quiet $service; then
        log_info "‚úÖ $service: ATIVO"
    else
        log_warn "‚ö†Ô∏è  $service: INATIVO - Iniciando..."
        sudo systemctl start $service
        sleep 2
        if systemctl is-active --quiet $service; then
            log_info "‚úÖ $service: INICIADO"
        else
            log_error "‚ùå Falha ao iniciar $service"
            exit 1
        fi
    fi
done

# 2. Verificar configura√ß√£o Nginx
log_step "2. Verificando configura√ß√£o Nginx..."
if sudo nginx -t; then
    log_info "‚úÖ Configura√ß√£o Nginx v√°lida"
else
    log_error "‚ùå Configura√ß√£o Nginx inv√°lida"
    exit 1
fi

# 3. Testes de conectividade
log_step "3. Testando conectividade..."

# Frontend
if curl -s -f "http://localhost:8082/health" > /dev/null; then
    log_info "‚úÖ Frontend respondendo (porta 8082)"
else
    log_error "‚ùå Frontend n√£o est√° respondendo"
    exit 1
fi

# WordPress API
if curl -s -f "http://localhost:8083/wp-json/wp/v2/" > /dev/null; then
    log_info "‚úÖ WordPress API respondendo (porta 8083)"
else
    log_error "‚ùå WordPress API n√£o est√° respondendo"
    exit 1
fi

# Proxy da API
if curl -s -f "http://localhost:8082/wp-json/wp/v2/" > /dev/null; then
    log_info "‚úÖ Proxy da API funcionando"
else
    log_error "‚ùå Proxy da API n√£o est√° funcionando"
    exit 1
fi

# 4. Performance e otimiza√ß√£o
log_step "4. Verificando otimiza√ß√µes de performance..."

# Gzip habilitado
if curl -H "Accept-Encoding: gzip" -s -I "http://localhost:8082/" | grep -q "Content-Encoding: gzip"; then
    log_info "‚úÖ Compress√£o Gzip ativa"
else
    log_warn "‚ö†Ô∏è  Compress√£o Gzip n√£o detectada"
fi

# Cache headers
if curl -s -I "http://localhost:8082/assets/" | grep -q "Cache-Control"; then
    log_info "‚úÖ Headers de cache configurados"
else
    log_warn "‚ö†Ô∏è  Headers de cache n√£o detectados"
fi

# 5. Seguran√ßa
log_step "5. Verificando configura√ß√µes de seguran√ßa..."

# Security headers
security_headers=("X-Frame-Options" "X-XSS-Protection" "X-Content-Type-Options")
headers_response=$(curl -s -I "http://localhost:8082/")

for header in "${security_headers[@]}"; do
    if echo "$headers_response" | grep -q "$header"; then
        log_info "‚úÖ $header configurado"
    else
        log_warn "‚ö†Ô∏è  $header n√£o encontrado"
    fi
done

# 6. WordPress espec√≠fico
log_step "6. Verificando configura√ß√µes WordPress..."

# XML-RPC bloqueado
if curl -s -I "http://localhost:8083/xmlrpc.php" | grep -q "403\|444"; then
    log_info "‚úÖ XML-RPC bloqueado"
else
    log_warn "‚ö†Ô∏è  XML-RPC acess√≠vel"
fi

# wp-config.php protegido
if curl -s -I "http://localhost:8083/wp-config.php" | grep -q "403\|404"; then
    log_info "‚úÖ wp-config.php protegido"
else
    log_warn "‚ö†Ô∏è  wp-config.php acess√≠vel"
fi

# 7. Monitoramento de recursos
log_step "7. Verificando recursos do sistema..."

# Espa√ßo em disco
disk_usage=$(df /var/www | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$disk_usage" -lt 80 ]; then
    log_info "‚úÖ Espa√ßo em disco: ${disk_usage}% (OK)"
else
    log_warn "‚ö†Ô∏è  Espa√ßo em disco: ${disk_usage}% (Alto)"
fi

# Mem√≥ria
memory_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100}')
log_info "üìä Uso de mem√≥ria: ${memory_usage}%"

# 8. Backup de configura√ß√£o
log_step "8. Criando backup de configura√ß√£o..."

BACKUP_DIR="/var/backups/saraivavision/$(date +%Y%m%d_%H%M%S)"
sudo mkdir -p "$BACKUP_DIR"

# Backup Nginx
sudo cp -r /etc/nginx/sites-available/saraivavision-production "$BACKUP_DIR/"
sudo cp /home/saraiva-vision-site/.env "$BACKUP_DIR/"

log_info "‚úÖ Backup salvo em: $BACKUP_DIR"

# 9. SSL/TLS (prepara√ß√£o)
log_step "9. Verificando prepara√ß√£o SSL..."

if [ -d "/etc/letsencrypt" ]; then
    log_info "‚úÖ Let's Encrypt dispon√≠vel"
    log_info "üí° Para SSL: certbot --nginx -d seudominio.com"
else
    log_warn "‚ö†Ô∏è  Let's Encrypt n√£o instalado"
    log_info "üí° Instale com: sudo apt install certbot python3-certbot-nginx"
fi

# 10. Relat√≥rio final
echo ""
echo "üéâ DEPLOY DE PRODU√á√ÉO CONCLU√çDO!"
echo "================================="
echo ""
log_info "üìç URLs de Acesso:"
echo "   ‚Ä¢ Frontend:        http://localhost:8082"
echo "   ‚Ä¢ WordPress Admin: http://localhost:8083/wp-admin"
echo "   ‚Ä¢ WordPress API:   http://localhost:8082/wp-json/wp/v2"
echo "   ‚Ä¢ Health Check:    http://localhost:8082/health"
echo ""

log_info "üîë Credenciais WordPress:"
echo "   ‚Ä¢ Usu√°rio: admin"
echo "   ‚Ä¢ Senha: SaraivaBlog2024!"
echo ""

log_info "üìÇ Diret√≥rios:"
echo "   ‚Ä¢ Frontend: /var/www/saraivavision"
echo "   ‚Ä¢ WordPress: /var/www/cms.saraivavision.local"
echo "   ‚Ä¢ Backups: /var/backups/saraivavision"
echo ""

log_info "‚öôÔ∏è  Configura√ß√µes:"
echo "   ‚Ä¢ Nginx: /etc/nginx/sites-available/saraivavision-production"
echo "   ‚Ä¢ PHP-FPM: Socket Unix (/run/php/php8.3-fpm.sock)"
echo "   ‚Ä¢ MySQL: localhost:3306"
echo ""

log_info "üîß Pr√≥ximos passos para produ√ß√£o:"
echo "   1. Configurar dom√≠nio DNS"
echo "   2. Instalar certificado SSL"
echo "   3. Configurar backup autom√°tico"
echo "   4. Configurar monitoramento"
echo "   5. Configurar CDN (opcional)"
echo ""

log_info "‚úÖ Sistema pronto para produ√ß√£o!"

exit 0
