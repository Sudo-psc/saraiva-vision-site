#!/bin/bash

# Script de Corre√ß√£o WordPress - Cl√≠nica Saraiva Vision
# Resolve problemas comuns de API retornando HTML em vez de JSON

echo "üè• Cl√≠nica Saraiva Vision - Script de Corre√ß√£o WordPress"
echo "=================================================="

# Verificar se √© ambiente de desenvolvimento ou produ√ß√£o
if [[ -n "$SSH_CONNECTION" ]]; then
    echo "üì° Detectado ambiente de PRODU√á√ÉO via SSH"
    ENVIRONMENT="production"
else
    echo "üíª Detectado ambiente de DESENVOLVIMENTO"
    ENVIRONMENT="development"
fi

# Fun√ß√£o para backup
backup_files() {
    echo "üíæ Criando backup dos arquivos cr√≠ticos..."
    BACKUP_DIR="/tmp/wp-backup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    if [ -f "/var/www/html/.htaccess" ]; then
        cp /var/www/html/.htaccess "$BACKUP_DIR/"
        echo "‚úÖ Backup do .htaccess criado"
    fi
    
    if [ -f "/var/www/html/wp-config.php" ]; then
        cp /var/www/html/wp-config.php "$BACKUP_DIR/"
        echo "‚úÖ Backup do wp-config.php criado"
    fi
    
    echo "üìÅ Backup salvo em: $BACKUP_DIR"
}

# Fun√ß√£o para diagnosticar o problema
diagnose_api() {
    echo "üîç Executando diagn√≥stico da API WordPress..."
    
    # Teste 1: Verificar se o WordPress est√° acess√≠vel
    if [ "$ENVIRONMENT" = "production" ]; then
        API_URL="https://clinicasaraivavision.com.br/wp-json/wp/v2"
    else
        API_URL="http://localhost:8081/wp-json/wp/v2"
    fi
    
    echo "üì° Testando URL: $API_URL/posts?per_page=1"
    
    RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "$API_URL/posts?per_page=1" 2>/dev/null || echo "HTTPSTATUS:000")
    HTTP_STATUS=$(echo $RESPONSE | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    RESPONSE_BODY=$(echo $RESPONSE | sed -E 's/HTTPSTATUS:[0-9]*$//')
    
    echo "üìä Status HTTP: $HTTP_STATUS"
    
    # Verificar se √© HTML
    if [[ $RESPONSE_BODY == *"<!doctype"* ]] || [[ $RESPONSE_BODY == *"<html"* ]]; then
        echo "‚ùå PROBLEMA DETECTADO: Servidor retornou HTML em vez de JSON"
        echo "üìÑ Pr√©via da resposta:"
        echo "$RESPONSE_BODY" | head -5
        return 1
    elif [[ $HTTP_STATUS == "200" ]]; then
        echo "‚úÖ API respondendo corretamente com JSON"
        return 0
    else
        echo "‚ö†Ô∏è  Status HTTP n√£o esperado: $HTTP_STATUS"
        return 2
    fi
}

# Fun√ß√£o para corrigir .htaccess
fix_htaccess() {
    echo "üîß Corrigindo arquivo .htaccess..."
    
    HTACCESS_FILE="/var/www/html/.htaccess"
    
    # Criar .htaccess se n√£o existir
    if [ ! -f "$HTACCESS_FILE" ]; then
        echo "üìù Criando novo arquivo .htaccess"
        touch "$HTACCESS_FILE"
    fi
    
    # Verificar se j√° tem regras do WordPress
    if ! grep -q "BEGIN WordPress" "$HTACCESS_FILE"; then
        echo "‚ûï Adicionando regras do WordPress ao .htaccess"
        cat >> "$HTACCESS_FILE" << 'EOF'

# BEGIN WordPress
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>
# END WordPress

# BEGIN WP REST API Fix for Clinic Saraiva Vision
<IfModule mod_rewrite.c>
RewriteRule ^wp-json/(.*) /wp-json/$1 [QSA,L]
</IfModule>
# END WP REST API Fix for Clinic Saraiva Vision
EOF
        echo "‚úÖ Regras adicionadas ao .htaccess"
    else
        echo "‚ÑπÔ∏è  Regras do WordPress j√° existem no .htaccess"
    fi
}

# Fun√ß√£o para verificar plugins conflitantes
check_plugins() {
    echo "üîå Verificando plugins que podem causar conflitos..."
    
    # Lista de plugins conhecidos que podem interferir na API REST
    PROBLEMATIC_PLUGINS=(
        "disable-json-api"
        "disable-wp-rest-api"
        "wp-rest-api-controller"
        "jwt-authentication-for-wp-rest-api"
    )
    
    PLUGINS_DIR="/var/www/html/wp-content/plugins"
    
    if [ -d "$PLUGINS_DIR" ]; then
        for plugin in "${PROBLEMATIC_PLUGINS[@]}"; do
            if [ -d "$PLUGINS_DIR/$plugin" ]; then
                echo "‚ö†Ô∏è  Plugin problem√°tico encontrado: $plugin"
                echo "üí° Considere desativar este plugin temporariamente"
            fi
        done
    fi
}

# Fun√ß√£o para flush rewrite rules via WP-CLI
flush_rewrite_rules() {
    echo "üîÑ Fazendo flush das regras de rewrite..."
    
    if command -v wp &> /dev/null; then
        cd /var/www/html
        wp rewrite flush --hard
        echo "‚úÖ Regras de rewrite atualizadas"
    else
        echo "‚ö†Ô∏è  WP-CLI n√£o encontrado, flush manual necess√°rio"
        echo "üí° Acesse wp-admin ‚Üí Settings ‚Üí Permalinks e clique em 'Save Changes'"
    fi
}

# Fun√ß√£o para verificar permiss√µes
check_permissions() {
    echo "üîê Verificando permiss√µes de arquivos..."
    
    WP_ROOT="/var/www/html"
    
    if [ -d "$WP_ROOT" ]; then
        # Verificar se o servidor web pode ler os arquivos
        if [ ! -r "$WP_ROOT/index.php" ]; then
            echo "‚ùå Arquivo index.php n√£o √© leg√≠vel pelo servidor web"
            echo "üîß Corrigindo permiss√µes..."
            chmod 644 "$WP_ROOT/index.php"
        fi
        
        # Verificar diret√≥rio wp-json
        WP_JSON_DIR="$WP_ROOT/wp-includes/rest-api"
        if [ -d "$WP_JSON_DIR" ]; then
            chmod -R 755 "$WP_JSON_DIR"
            echo "‚úÖ Permiss√µes do diret√≥rio REST API atualizadas"
        fi
    fi
}

# Fun√ß√£o para testar corre√ß√£o
test_fix() {
    echo "üß™ Testando se as corre√ß√µes funcionaram..."
    
    sleep 2  # Aguardar propaga√ß√£o das mudan√ßas
    
    if diagnose_api; then
        echo "üéâ SUCESSO! API WordPress funcionando corretamente"
        echo "‚úÖ A Cl√≠nica Saraiva Vision pode usar o sistema WordPress"
        return 0
    else
        echo "‚ùå Ainda h√° problemas com a API"
        echo "üìû Contate o suporte t√©cnico para an√°lise avan√ßada"
        return 1
    fi
}

# Fun√ß√£o principal
main() {
    echo "üöÄ Iniciando processo de corre√ß√£o..."
    
    # Verificar se temos permiss√µes necess√°rias
    if [ "$EUID" -ne 0 ] && [ "$ENVIRONMENT" = "production" ]; then
        echo "‚ö†Ô∏è  Este script precisa de privil√©gios de administrador em produ√ß√£o"
        echo "üí° Execute: sudo $0"
        exit 1
    fi
    
    # Executar corre√ß√µes
    backup_files
    
    echo ""
    diagnose_api
    DIAGNOSIS_RESULT=$?
    
    if [ $DIAGNOSIS_RESULT -eq 0 ]; then
        echo "‚úÖ API j√° est√° funcionando corretamente!"
        exit 0
    fi
    
    echo ""
    fix_htaccess
    echo ""
    check_plugins
    echo ""
    check_permissions
    echo ""
    flush_rewrite_rules
    echo ""
    test_fix
    
    if [ $? -eq 0 ]; then
        echo ""
        echo "üè• Cl√≠nica Saraiva Vision - Corre√ß√£o Conclu√≠da com Sucesso!"
        echo "üìß Sistema WordPress pronto para receber dados do blog"
        echo "üë®‚Äç‚öïÔ∏è Dr. Philipe Saraiva Cruz pode publicar conte√∫do m√©dico"
    else
        echo ""
        echo "‚ö†Ô∏è  Corre√ß√£o parcial realizada"
        echo "üìã Pr√≥ximos passos recomendados:"
        echo "   1. Verificar logs do servidor web"
        echo "   2. Desativar plugins um por um"
        echo "   3. Verificar tema ativo"
        echo "   4. Consultar documenta√ß√£o do WordPress REST API"
    fi
}

# Executar script
main "$@"