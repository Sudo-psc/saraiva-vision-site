# Nginx Reverse Proxy Dockerfile for Saraiva Vision
# Optimized for medical website with security and performance focus

FROM nginx:1.25-alpine AS production

# Install security updates and additional tools
RUN apk upgrade --no-cache && \
    apk add --no-cache \
    curl \
    tini \
    openssl \
    certbot \
    certbot-nginx

# Create non-root user for nginx
RUN addgroup -g 1001 -S nginx-proxy && \
    adduser -S nginx-proxy -u 1001 -G nginx-proxy

# Remove default nginx configuration
RUN rm -f /etc/nginx/conf.d/default.conf

# Create main nginx configuration
RUN echo 'user nginx;' > /etc/nginx/nginx.conf && \
    echo 'worker_processes auto;' >> /etc/nginx/nginx.conf && \
    echo 'error_log /var/log/nginx/error.log notice;' >> /etc/nginx/nginx.conf && \
    echo 'pid /var/run/nginx.pid;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo 'events {' >> /etc/nginx/nginx.conf && \
    echo '    worker_connections 1024;' >> /etc/nginx/nginx.conf && \
    echo '    use epoll;' >> /etc/nginx/nginx.conf && \
    echo '    multi_accept on;' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo 'http {' >> /etc/nginx/nginx.conf && \
    echo '    include /etc/nginx/mime.types;' >> /etc/nginx/nginx.conf && \
    echo '    default_type application/octet-stream;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Logging format' >> /etc/nginx/nginx.conf && \
    echo '    log_format main' >> /etc/nginx/nginx.conf && \
    echo '        '"'"'$remote_addr - $remote_user [$time_local] "$request" '"'"' >> /etc/nginx/nginx.conf && \
    echo '        '"'"'$status $body_bytes_sent "$http_referer" '"'"' >> /etc/nginx/nginx.conf && \
    echo '        '"'"'"$http_user_agent" "$http_x_forwarded_for"'"'"';' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    access_log /var/log/nginx/access.log main;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Performance optimizations' >> /etc/nginx/nginx.conf && \
    echo '    sendfile on;' >> /etc/nginx/nginx.conf && \
    echo '    tcp_nopush on;' >> /etc/nginx/nginx.conf && \
    echo '    tcp_nodelay on;' >> /etc/nginx/nginx.conf && \
    echo '    keepalive_timeout 65;' >> /etc/nginx/nginx.conf && \
    echo '    types_hash_max_size 2048;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Gzip compression' >> /etc/nginx/nginx.conf && \
    echo '    gzip on;' >> /etc/nginx/nginx.conf && \
    echo '    gzip_vary on;' >> /etc/nginx/nginx.conf && \
    echo '    gzip_min_length 1024;' >> /etc/nginx/nginx.conf && \
    echo '    gzip_comp_level 6;' >> /etc/nginx/nginx.conf && \
    echo '    gzip_types' >> /etc/nginx/nginx.conf && \
    echo '        text/plain' >> /etc/nginx/nginx.conf && \
    echo '        text/css' >> /etc/nginx/nginx.conf && \
    echo '        text/js' >> /etc/nginx/nginx.conf && \
    echo '        text/xml' >> /etc/nginx/nginx.conf && \
    echo '        text/javascript' >> /etc/nginx/nginx.conf && \
    echo '        application/javascript' >> /etc/nginx/nginx.conf && \
    echo '        application/json' >> /etc/nginx/nginx.conf && \
    echo '        application/xml+rss' >> /etc/nginx/nginx.conf && \
    echo '        application/atom+xml' >> /etc/nginx/nginx.conf && \
    echo '        image/svg+xml;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Security headers' >> /etc/nginx/nginx.conf && \
    echo '    add_header X-Frame-Options "SAMEORIGIN" always;' >> /etc/nginx/nginx.conf && \
    echo '    add_header X-Content-Type-Options "nosniff" always;' >> /etc/nginx/nginx.conf && \
    echo '    add_header X-XSS-Protection "1; mode=block" always;' >> /etc/nginx/nginx.conf && \
    echo '    add_header Referrer-Policy "strict-origin-when-cross-origin" always;' >> /etc/nginx/nginx.conf && \
    echo '    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Rate limiting' >> /etc/nginx/nginx.conf && \
    echo '    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;' >> /etc/nginx/nginx.conf && \
    echo '    limit_req_zone $binary_remote_addr zone=contact:10m rate=5r/m;' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Upstream servers' >> /etc/nginx/nginx.conf && \
    echo '    upstream frontend {' >> /etc/nginx/nginx.conf && \
    echo '        server frontend:3002 max_fails=3 fail_timeout=30s;' >> /etc/nginx/nginx.conf && \
    echo '    }' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    upstream api {' >> /etc/nginx/nginx.conf && \
    echo '        server api:3001 max_fails=3 fail_timeout=30s;' >> /etc/nginx/nginx.conf && \
    echo '    }' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    upstream wordpress {' >> /etc/nginx/nginx.conf && \
    echo '        server wordpress:9000 max_fails=3 fail_timeout=30s;' >> /etc/nginx/nginx.conf && \
    echo '    }' >> /etc/nginx/nginx.conf && \
    echo '' >> /etc/nginx/nginx.conf && \
    echo '    # Include server configurations' >> /etc/nginx/nginx.conf && \
    echo '    include /etc/nginx/conf.d/*.conf;' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf

# Create main server configuration
RUN echo 'server {' > /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    listen 80;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    server_name localhost saraivavision.local;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    # Health check endpoint' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    location /nginx-health {' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        access_log off;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        return 200 "{\\"status\\":\\"healthy\\",\\"service\\":\\"nginx\\",\\"timestamp\\":\\"$(date -Iseconds)\\",\\"upstreams\\":{\\"frontend\\":\\"up\\",\\"api\\":\\"up\\",\\"wordpress\\":\\"up\\"}}";' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        add_header Content-Type application/json;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    }' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    # API routes with rate limiting' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    location /api/ {' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        limit_req zone=api burst=10 nodelay;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_pass http://api;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_http_version 1.1;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header Upgrade $http_upgrade;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header Connection '"'"'upgrade'"'"';' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_cache_bypass $http_upgrade;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_connect_timeout 60s;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_send_timeout 60s;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_read_timeout 60s;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    }' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    # Contact form with stricter rate limiting' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    location /api/contact {' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        limit_req zone=contact burst=2 nodelay;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_pass http://api;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_http_version 1.1;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    }' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    # WordPress admin and REST API' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    location ~ ^/(wp-admin|wp-json|wp-content|wp-includes)/ {' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_pass http://wordpress;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_http_version 1.1;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_connect_timeout 60s;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_send_timeout 60s;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_read_timeout 60s;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    }' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    # Frontend application (SPA)' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    location / {' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_pass http://frontend;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_http_version 1.1;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header Upgrade $http_upgrade;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header Connection '"'"'upgrade'"'"';' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_cache_bypass $http_upgrade;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_connect_timeout 60s;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_send_timeout 60s;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '        proxy_read_timeout 60s;' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '    }' >> /etc/nginx/conf.d/saraiva-vision.conf && \
    echo '}' >> /etc/nginx/conf.d/saraiva-vision.conf

# Create SSL configuration template (for production)
RUN echo '# SSL configuration (production)' > /etc/nginx/conf.d/ssl.conf && \
    echo '# This file should be activated when SSL certificates are available' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#' >> /etc/nginx/conf.d/ssl.conf && \
    echo '# server {' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     listen 443 ssl http2;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     server_name saraivavision.com.br;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     ssl_certificate /etc/ssl/certs/saraivavision.crt;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     ssl_certificate_key /etc/ssl/private/saraivavision.key;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     ssl_protocols TLSv1.2 TLSv1.3;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     ssl_prefer_server_ciphers off;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     # HSTS' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     # Include main configuration' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     include /etc/nginx/conf.d/saraiva-vision.conf;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '# }' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#' >> /etc/nginx/conf.d/ssl.conf && \
    echo '# # Redirect HTTP to HTTPS' >> /etc/nginx/conf.d/ssl.conf && \
    echo '# server {' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     listen 80;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     server_name saraivavision.com.br;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '#     return 301 https://$server_name$request_uri;' >> /etc/nginx/conf.d/ssl.conf && \
    echo '# }' >> /etc/nginx/conf.d/ssl.conf

# Create health check script
RUN echo '#!/bin/sh' > /usr/local/bin/health-check.sh && \
    echo 'curl -f http://localhost:80/nginx-health || exit 1' >> /usr/local/bin/health-check.sh && \
    chmod +x /usr/local/bin/health-check.sh

# Create directories and set permissions
RUN mkdir -p \
    /var/cache/nginx \
    /var/log/nginx \
    /etc/ssl/certs \
    /etc/ssl/private && \
    chown -R nginx-proxy:nginx-proxy /var/cache/nginx && \
    chown -R nginx-proxy:nginx-proxy /var/log/nginx && \
    chown -R nginx-proxy:nginx-proxy /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown nginx-proxy:nginx-proxy /var/run/nginx.pid

# Security hardening
RUN rm -rf /var/cache/apk/* && \
    rm -rf /tmp/* && \
    rm -rf /usr/share/man/* && \
    rm -rf /usr/share/doc/*

# Test nginx configuration
RUN nginx -t

# Switch to non-root user
USER nginx-proxy

# Expose ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# Metadata
LABEL maintainer="Saraiva Vision Development Team"
LABEL description="Nginx reverse proxy for Saraiva Vision medical website"
LABEL version="1.0.0"
LABEL service="nginx"