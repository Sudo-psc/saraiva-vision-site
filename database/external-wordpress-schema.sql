-- External WordPress Integration Database Schema
-- Based on specifications and existing database patterns

-- Enable UUID extension for better key management
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Main sources table for external WordPress installations
CREATE TABLE IF NOT EXISTS external_wordpress_sources (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    base_url TEXT NOT NULL CHECK (base_url ~ '^https?://'),
    api_key TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'error')),

    -- Configuration fields
    sync_frequency VARCHAR(50) DEFAULT '5 minutes' CHECK (sync_frequency ~ '^\d+\s+(seconds?|minutes?|hours?|days?)$'),
    max_posts_per_sync INTEGER DEFAULT 100 CHECK (max_posts_per_sync BETWEEN 1 AND 1000),
    cache_ttl INTEGER DEFAULT 300 CHECK (cache_ttl BETWEEN 60 AND 86400),

    -- Feature toggles
    enable_webhooks BOOLEAN DEFAULT false,
    enable_ssl_verification BOOLEAN DEFAULT true,
    enable_compliance_filter BOOLEAN DEFAULT true,

    -- Rate limiting
    rate_limit_requests INTEGER DEFAULT 1000 CHECK (rate_limit_requests BETWEEN 10 AND 10000),
    rate_limit_window INTEGER DEFAULT 3600 CHECK (rate_limit_window BETWEEN 60 AND 86400),

    -- WordPress version info
    wordpress_version VARCHAR(20),
    rest_api_version VARCHAR(10) DEFAULT 'v2' CHECK (rest_api_version IN ('v1', 'v2')),

    -- Supported content types
    supported_post_types TEXT[] DEFAULT ARRAY['post', 'page'],
    supported_taxonomies TEXT[] DEFAULT ARRAY['category', 'tag'],

    -- Health monitoring
    health_check_url TEXT,
    health_check_interval INTEGER DEFAULT 300 CHECK (health_check_interval BETWEEN 60 AND 3600),
    last_health_check TIMESTAMP WITH TIME ZONE,
    health_status VARCHAR(20) CHECK (health_status IN ('healthy', 'degraded', 'unhealthy', 'unknown')),

    -- Webhook configuration
    webhook_secret TEXT,
    last_sync TIMESTAMP WITH TIME ZONE,

    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

    -- Constraints and indexes
    CONSTRAINT base_url_format CHECK (base_url ~ '^https?://[^/]+/?$'),
    CONSTRAINT api_key_length CHECK (api_key IS NULL OR LENGTH(api_key) >= 16),
    CONSTRAINT webhook_secret_length CHECK (webhook_secret IS NULL OR (LENGTH(webhook_secret) >= 16 AND LENGTH(webhook_secret) <= 255))
);

-- Content cache table for storing external WordPress content
CREATE TABLE IF NOT EXISTS external_wordpress_content (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    source_id BIGINT NOT NULL REFERENCES external_wordpress_sources(id) ON DELETE CASCADE,

    -- Content identification
    content_type VARCHAR(20) NOT NULL CHECK (content_type IN ('post', 'page', 'media', 'category', 'tag')),
    external_id BIGINT NOT NULL,
    slug VARCHAR(255),

    -- Cached content
    content JSONB NOT NULL,

    -- Cache metadata
    cached_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    last_modified TIMESTAMP WITH TIME ZONE,
    etag TEXT,

    -- Content metadata
    title TEXT,
    author_id BIGINT,
    published_at TIMESTAMP WITH TIME ZONE,
    status VARCHAR(20) DEFAULT 'publish' CHECK (status IN ('publish', 'draft', 'pending', 'private')),

    -- Compliance and quality
    compliance_score INTEGER DEFAULT 0 CHECK (compliance_score BETWEEN 0 AND 100),
    compliance_filtered BOOLEAN DEFAULT false,

    -- Performance tracking
    cache_hits INTEGER DEFAULT 0,
    last_accessed TIMESTAMP WITH TIME ZONE,
    response_time INTEGER, -- in milliseconds

    -- Unique constraint to prevent duplicate caching
    CONSTRAINT unique_content_per_source UNIQUE (source_id, content_type, external_id),

);

-- Indexes for external_wordpress_content table
CREATE INDEX idx_source_content_type ON external_wordpress_content (source_id, content_type);
CREATE INDEX idx_external_id ON external_wordpress_content (external_id);
CREATE INDEX idx_expires_at ON external_wordpress_content (expires_at);
CREATE INDEX idx_published_at ON external_wordpress_content (published_at);
CREATE INDEX idx_compliance_score ON external_wordpress_content (compliance_score);
CREATE INDEX idx_cache_access ON external_wordpress_content (last_accessed);
CREATE INDEX idx_content_compliance ON external_wordpress_content (source_id, compliance_score, status);

-- Synchronization logs table
CREATE TABLE IF NOT EXISTS external_wordpress_sync_logs (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    source_id BIGINT REFERENCES external_wordpress_sources(id) ON DELETE CASCADE,

    -- Sync operation details
    action VARCHAR(30) NOT NULL CHECK (action IN ('sync', 'cache_invalidate', 'health_check', 'error', 'manual_sync', 'webhook_trigger')),
    status VARCHAR(20) NOT NULL CHECK (status IN ('success', 'failed', 'partial', 'running')),

    -- Timing information
    started_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP WITH TIME ZONE,
    duration INTEGER, -- in seconds
    response_time INTEGER, -- response time in milliseconds

    -- Results summary
    items_processed INTEGER DEFAULT 0,
    items_failed INTEGER DEFAULT 0,
    items_updated INTEGER DEFAULT 0,
    items_created INTEGER DEFAULT 0,

    -- Error information
    error_code TEXT,
    error_message TEXT,
    stack_trace TEXT,

    -- Request details
    request_url TEXT,
    request_method VARCHAR(10) CHECK (request_method IN ('GET', 'POST', 'PUT', 'DELETE', 'HEAD')),
    response_status INTEGER,
    response_size BIGINT,

    -- Additional context
    details JSONB,

    -- System information
    server_info JSONB,
    client_info JSONB
);

-- Indexes for external_wordpress_sync_logs table
CREATE INDEX idx_source_sync ON external_wordpress_sync_logs (source_id);
CREATE INDEX idx_action_status ON external_wordpress_sync_logs (action, status);
CREATE INDEX idx_started_at ON external_wordpress_sync_logs (started_at);
CREATE INDEX idx_completed_at ON external_wordpress_sync_logs (completed_at);
CREATE INDEX idx_error_code ON external_wordpress_sync_logs (error_code);
CREATE INDEX idx_sync_performance ON external_wordpress_sync_logs (duration, items_processed);

-- Media cache table for external WordPress media files
CREATE TABLE IF NOT EXISTS external_wordpress_media (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    source_id BIGINT NOT NULL REFERENCES external_wordpress_sources(id) ON DELETE CASCADE,

    -- Media identification
    external_id BIGINT NOT NULL,
    file_url TEXT NOT NULL,
    file_path TEXT,

    -- Media metadata
    title TEXT,
    alt_text TEXT,
    caption TEXT,
    description TEXT,

    -- File information
    mime_type VARCHAR(100),
    file_size BIGINT,
    width INTEGER,
    height INTEGER,

    -- Media type
    media_type VARCHAR(20) NOT NULL CHECK (media_type IN ('image', 'video', 'audio', 'file', 'other')),

    -- Caching and optimization
    local_path TEXT, -- path to locally cached/proxied file
    optimized BOOLEAN DEFAULT false,

    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

    -- Constraints and indexes
    CONSTRAINT unique_media_per_source UNIQUE (source_id, external_id),
    INDEX idx_source_media (source_id, media_type),
    INDEX idx_file_url (file_url),
    INDEX idx_mime_type (mime_type)
);

-- User preferences for external content
CREATE TABLE IF NOT EXISTS external_wordpress_user_preferences (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    source_id BIGINT REFERENCES external_wordpress_sources(id) ON DELETE CASCADE,

    -- Display preferences
    preferred_content_types TEXT[] DEFAULT ARRAY['post', 'page'],
    max_items_per_page INTEGER DEFAULT 10 CHECK (max_items_per_page BETWEEN 1 AND 100),

    -- Filter preferences
    show_draft_content BOOLEAN DEFAULT false,
    compliance_threshold INTEGER DEFAULT 80 CHECK (compliance_threshold BETWEEN 0 AND 100),

    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

    -- Constraints
    CONSTRAINT unique_user_source_preference UNIQUE (user_id, source_id),

    -- Indexes
    INDEX idx_user_preferences (user_id),
    INDEX idx_source_preferences (source_id)
);

-- Database functions for cache management

-- Function to invalidate cache for a specific source
CREATE OR REPLACE FUNCTION invalidate_source_cache(source_id_param BIGINT)
RETURNS INTEGER
SET search_path = public, pg_temp
AS $$
DECLARE
    invalidated_count INTEGER;
BEGIN
    -- Invalidate content cache
    UPDATE external_wordpress_content
    SET expires_at = CURRENT_TIMESTAMP
    WHERE source_id = source_id_param;

    GET DIAGNOSTICS invalidated_count = ROW_COUNT;

    -- Log the cache invalidation
    INSERT INTO external_wordpress_sync_logs (source_id, action, status, details)
    VALUES (source_id_param, 'cache_invalidate', 'success',
            jsonb_build_object('invalidated_items', invalidated_count, 'trigger', 'manual'));

    RETURN invalidated_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to update source health status
CREATE OR REPLACE FUNCTION update_source_health(
    source_id_param BIGINT,
    status_param VARCHAR(20),
    response_time_param INTEGER DEFAULT NULL,
    details_param JSONB DEFAULT NULL
) RETURNS VOID
SET search_path = public, pg_temp
AS $$
BEGIN
    UPDATE external_wordpress_sources
    SET
        health_status = status_param,
        last_health_check = CURRENT_TIMESTAMP,
        updated_at = CURRENT_TIMESTAMP
    WHERE id = source_id_param;

    -- Log health check
    INSERT INTO external_wordpress_sync_logs (source_id, action, status, details, response_time)
    VALUES (source_id_param, 'health_check',
            CASE WHEN status_param = 'healthy' THEN 'success' ELSE 'failed' END,
            details_param,
            response_time_param);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to validate sync frequency
CREATE OR REPLACE FUNCTION validate_sync_frequency()
RETURNS TABLE (source_id BIGINT, name VARCHAR, sync_frequency VARCHAR, is_valid BOOLEAN)
SET search_path = public, pg_temp
AS $$
BEGIN
    RETURN QUERY
    SELECT
        s.id,
        s.name,
        s.sync_frequency,
        CASE
            WHEN s.sync_frequency ~ '^\d+\s+(seconds?|minutes?|hours?|days?)$' THEN true
            ELSE false
        END as is_valid
    FROM external_wordpress_sources s
    WHERE s.status = 'active';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to clean up expired cache entries
CREATE OR REPLACE FUNCTION cleanup_expired_cache()
RETURNS INTEGER
SET search_path = public, pg_temp
AS $$
DECLARE
    cleaned_count INTEGER;
BEGIN
    -- Delete expired cache entries older than 7 days
    DELETE FROM external_wordpress_content
    WHERE expires_at < CURRENT_TIMESTAMP - INTERVAL '7 days';

    GET DIAGNOSTICS cleaned_count = ROW_COUNT;

    -- Log the cleanup
    INSERT INTO external_wordpress_sync_logs (source_id, action, status, details)
    VALUES (NULL, 'cache_invalidate', 'success',
            jsonb_build_object('action', 'cleanup_expired', 'cleaned_items', cleaned_count));

    RETURN cleaned_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Database views for common queries

-- View for active external sources with health status
CREATE OR REPLACE VIEW active_external_sources AS
SELECT
    s.id,
    s.name,
    s.base_url,
    s.status,
    s.health_status,
    s.last_health_check,
    s.last_sync,
    s.sync_frequency,
    s.supported_post_types,
    s.supported_taxonomies,
    s.created_at,
    s.updated_at,
    -- Calculate cache efficiency
    COALESCE(cache_stats.cache_hits, 0) as cache_hits,
    COALESCE(cache_stats.total_items, 0) as cached_items,
    CASE
        WHEN COALESCE(cache_stats.cache_hits, 0) > 0
        THEN ROUND((cache_stats.cache_hits::float / (cache_stats.cache_hits + 100)) * 100, 2)
        ELSE 0
    END as cache_hit_rate_percent,
    -- Calculate sync efficiency
    COALESCE(sync_stats.success_rate, 0) as sync_success_rate_percent,
    COALESCE(sync_stats.avg_response_time, 0) as avg_sync_response_time_ms
FROM external_wordpress_sources s
LEFT JOIN (
    SELECT
        source_id,
        SUM(cache_hits) as cache_hits,
        COUNT(*) as total_items
    FROM external_wordpress_content
    GROUP BY source_id
) cache_stats ON s.id = cache_stats.source_id
LEFT JOIN (
    SELECT
        source_id,
        AVG(CASE WHEN status = 'success' THEN 100.0 ELSE 0.0 END) as success_rate,
        AVG(COALESCE(response_time, 0)) as avg_response_time
    FROM external_wordpress_sync_logs
    WHERE action = 'sync' AND started_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
    GROUP BY source_id
) sync_stats ON s.id = sync_stats.source_id
WHERE s.status = 'active';

-- View for content summary across all sources
CREATE OR REPLACE VIEW external_content_summary AS
SELECT
    ec.source_id,
    s.name as source_name,
    ec.content_type,
    COUNT(*) as total_items,
    COUNT(CASE WHEN ec.expires_at > CURRENT_TIMESTAMP THEN 1 END) as active_items,
    COUNT(CASE WHEN ec.expires_at <= CURRENT_TIMESTAMP THEN 1 END) as expired_items,
    AVG(ec.compliance_score) as avg_compliance_score,
    COUNT(CASE WHEN ec.compliance_filtered = true THEN 1 END) as filtered_items,
    MAX(ec.published_at) as latest_content,
    MIN(ec.published_at) as earliest_content,
    SUM(ec.cache_hits) as total_cache_hits,
    AVG(COALESCE(ec.response_time, 0)) as avg_response_time_ms
FROM external_wordpress_content ec
JOIN external_wordpress_sources s ON ec.source_id = s.id
GROUP BY ec.source_id, s.name, ec.content_type
ORDER BY s.name, ec.content_type;

-- View for sync health dashboard
CREATE OR REPLACE VIEW sync_health_dashboard AS
SELECT
    s.id,
    s.name,
    s.status,
    s.health_status,
    s.last_health_check,
    s.last_sync,
    -- Recent sync activity
    COALESCE(recent_syncs.total_syncs, 0) as syncs_last_24h,
    COALESCE(recent_syncs.successful_syncs, 0) as successful_syncs_last_24h,
    COALESCE(recent_syncs.failed_syncs, 0) as failed_syncs_last_24h,
    COALESCE(recent_syncs.avg_sync_duration, 0) as avg_sync_duration_seconds,
    -- Error information
    COALESCE(recent_errors.total_errors, 0) as errors_last_24h,
    COALESCE(recent_errors.last_error, 'No recent errors') as last_error_message,
    COALESCE(recent_errors.last_error_time, NULL) as last_error_time
FROM external_wordpress_sources s
LEFT JOIN (
    SELECT
        source_id,
        COUNT(*) as total_syncs,
        COUNT(CASE WHEN status = 'success' THEN 1 END) as successful_syncs,
        COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_syncs,
        AVG(COALESCE(duration, 0)) as avg_sync_duration
    FROM external_wordpress_sync_logs
    WHERE action = 'sync' AND started_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
    GROUP BY source_id
) recent_syncs ON s.id = recent_syncs.source_id
LEFT JOIN (
    SELECT DISTINCT ON (source_id)
        source_id,
        error_message as last_error,
        started_at as last_error_time
    FROM external_wordpress_sync_logs
    WHERE error_message IS NOT NULL AND started_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
    ORDER BY source_id, started_at DESC
) recent_errors ON s.id = recent_errors.source_id
ORDER BY s.name;

-- Row Level Security (RLS) policies

-- Enable RLS on all tables
ALTER TABLE external_wordpress_sources ENABLE ROW LEVEL SECURITY;
ALTER TABLE external_wordpress_content ENABLE ROW LEVEL SECURITY;
ALTER TABLE external_wordpress_sync_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE external_wordpress_media ENABLE ROW LEVEL SECURITY;
ALTER TABLE external_wordpress_user_preferences ENABLE ROW LEVEL SECURITY;

-- RLS policy for external_wordpress_sources
-- Allow authenticated users to read active sources
CREATE POLICY "Allow authenticated users to read active sources" ON external_wordpress_sources
    FOR SELECT USING (auth.uid() IS NOT NULL AND status = 'active');

-- Allow admins to manage sources
CREATE POLICY "Allow admins to manage sources" ON external_wordpress_sources
    FOR ALL USING (EXISTS (
        SELECT 1 FROM auth.users
        JOIN auth.user_roles ON auth.users.id = auth.user_roles.user_id
        WHERE auth.users.id = auth.uid() AND auth.user_roles.role = 'admin'
    ));

-- RLS policy for external_wordpress_content
-- Allow authenticated users to read active content
CREATE POLICY "Allow authenticated users to read active content" ON external_wordpress_content
    FOR SELECT USING (
        auth.uid() IS NOT NULL
        AND expires_at > CURRENT_TIMESTAMP
        AND EXISTS (
            SELECT 1 FROM external_wordpress_sources
            WHERE external_wordpress_sources.id = external_wordpress_content.source_id
            AND external_wordpress_sources.status = 'active'
        )
    );

-- RLS policy for external_wordpress_sync_logs
-- Allow authenticated users to read logs
CREATE POLICY "Allow authenticated users to read sync logs" ON external_wordpress_sync_logs
    FOR SELECT USING (auth.uid() IS NOT NULL);

-- Allow admins to write logs
CREATE POLICY "Allow admins to write sync logs" ON external_wordpress_sync_logs
    FOR INSERT USING (EXISTS (
        SELECT 1 FROM auth.users
        JOIN auth.user_roles ON auth.users.id = auth.user_roles.user_id
        WHERE auth.users.id = auth.uid() AND auth.user_roles.role = 'admin'
    ));

-- RLS policy for external_wordpress_media
-- Allow authenticated users to read media from active sources
CREATE POLICY "Allow authenticated users to read media" ON external_wordpress_media
    FOR SELECT USING (
        auth.uid() IS NOT NULL
        AND EXISTS (
            SELECT 1 FROM external_wordpress_sources
            WHERE external_wordpress_sources.id = external_wordpress_media.source_id
            AND external_wordpress_sources.status = 'active'
        )
    );

-- RLS policy for external_wordpress_user_preferences
-- Allow users to manage their own preferences
CREATE POLICY "Allow users to manage their preferences" ON external_wordpress_user_preferences
    FOR ALL USING (auth.uid() = user_id);

-- Grant permissions
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON external_wordpress_sources TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON external_wordpress_content TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON external_wordpress_sync_logs TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON external_wordpress_media TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON external_wordpress_user_preferences TO authenticated;
GRANT SELECT ON active_external_sources TO authenticated;
GRANT SELECT ON external_content_summary TO authenticated;
GRANT SELECT ON sync_health_dashboard TO authenticated;
GRANT EXECUTE ON FUNCTION invalidate_source_cache(BIGINT) TO authenticated;
GRANT EXECUTE ON FUNCTION update_source_health(BIGINT, VARCHAR, INTEGER, JSONB) TO authenticated;
GRANT EXECUTE ON FUNCTION validate_sync_frequency() TO authenticated;
GRANT EXECUTE ON FUNCTION cleanup_expired_cache() TO authenticated;