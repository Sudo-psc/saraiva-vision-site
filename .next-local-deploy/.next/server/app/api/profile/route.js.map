{"version":3,"file":"app/api/profile/route.js","mappings":"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","sources":["webpack://_N_E/./app/api/profile/route.ts","webpack://_N_E/./app/api/profile/route.ts?52dd","webpack://_N_E/?7e66","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/./lib/validations/api.ts"],"sourcesContent":["/**\n * Profile API Route\n * POST /api/profile - Set user profile preference\n * GET /api/profile - Get current profile\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { profileSchema } from '@/lib/validations/api';\nimport type { ProfileResponse } from '@/types/api';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    const validationResult = profileSchema.safeParse(body);\n\n    if (!validationResult.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Invalid profile data',\n          details: validationResult.error.flatten().fieldErrors,\n        },\n        { status: 400 }\n      );\n    }\n\n    const { profile, source, confidence } = validationResult.data;\n\n    const response: ProfileResponse = {\n      success: true,\n      data: {\n        profile,\n        detectedAt: new Date().toISOString(),\n        source,\n        confidence,\n      },\n      message: 'Profile preference saved successfully',\n    };\n\n    // Set cookie\n    const cookieResponse = NextResponse.json(response, { status: 200 });\n    cookieResponse.cookies.set('profile-preference', profile, {\n      httpOnly: false,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 31536000,\n      path: '/',\n    });\n\n    return cookieResponse;\n  } catch (error) {\n    console.error('Profile API Error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  const profile = request.cookies.get('profile-preference')?.value as\n    | 'familiar'\n    | 'jovem'\n    | 'senior'\n    | undefined;\n\n  if (!profile) {\n    return NextResponse.json(\n      { success: false, error: 'No profile preference set' },\n      { status: 404 }\n    );\n  }\n\n  const response: ProfileResponse = {\n    success: true,\n    data: {\n      profile,\n      detectedAt: new Date().toISOString(),\n      source: 'manual',\n    },\n  };\n\n  return NextResponse.json(response, { status: 200 });\n}\n\nexport const runtime = 'edge';\nexport const dynamic = 'force-dynamic';\n","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/lib/constants\";\nimport { NoFallbackError } from \"next/dist/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/server/response-cache\";\nimport * as userland from \"/home/saraiva-vision-site/app/api/profile/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/profile/route\",\n        pathname: \"/api/profile\",\n        filename: \"route\",\n        bundlePath: \"app/api/profile/route\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"/home/saraiva-vision-site/app/api/profile/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/profile/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","var _self___RSC_MANIFEST;\nimport { createServerModuleMap } from \"next/dist/server/app-render/action-utils\";\nimport { setReferenceManifestsSingleton } from \"next/dist/server/app-render/encryption-utils\";\nimport { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fprofile%2Froute&page=%2Fapi%2Fprofile%2Froute&pagePath=private-next-app-dir%2Fapi%2Fprofile%2Froute.ts&appDir=%2Fhome%2Fsaraiva-vision-site%2Fapp&appPaths=%2Fapi%2Fprofile%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!private-next-app-dir/api/profile/route.ts?__next_edge_ssr_entry__\";\nconst nextConfig = {\"env\":{},\"eslint\":{\"ignoreDuringBuilds\":true},\"typescript\":{\"ignoreBuildErrors\":true,\"tsconfigPath\":\"tsconfig.json\"},\"typedRoutes\":false,\"distDir\":\".next\",\"cleanDistDir\":true,\"assetPrefix\":\"\",\"cacheMaxMemorySize\":52428800,\"configOrigin\":\"next.config.js\",\"useFileSystemPublicRoutes\":true,\"generateEtags\":true,\"pageExtensions\":[\"tsx\",\"ts\",\"jsx\",\"js\"],\"poweredByHeader\":false,\"compress\":true,\"images\":{\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"loaderFile\":\"\",\"domains\":[],\"disableStaticImages\":false,\"minimumCacheTTL\":60,\"formats\":[\"image/webp\"],\"dangerouslyAllowSVG\":false,\"contentSecurityPolicy\":\"script-src 'none'; frame-src 'none'; sandbox;\",\"contentDispositionType\":\"attachment\",\"remotePatterns\":[],\"unoptimized\":false},\"devIndicators\":{\"position\":\"bottom-left\"},\"onDemandEntries\":{\"maxInactiveAge\":60000,\"pagesBufferLength\":5},\"amp\":{\"canonicalBase\":\"\"},\"basePath\":\"\",\"sassOptions\":{},\"trailingSlash\":false,\"i18n\":null,\"productionBrowserSourceMaps\":false,\"excludeDefaultMomentLocales\":true,\"serverRuntimeConfig\":{},\"publicRuntimeConfig\":{},\"reactProductionProfiling\":false,\"reactStrictMode\":true,\"reactMaxHeadersLength\":6000,\"httpAgentOptions\":{\"keepAlive\":true},\"logging\":{},\"compiler\":{},\"expireTime\":31536000,\"staticPageGenerationTimeout\":60,\"output\":\"standalone\",\"modularizeImports\":{\"@mui/icons-material\":{\"transform\":\"@mui/icons-material/{{member}}\"},\"lodash\":{\"transform\":\"lodash/{{member}}\"}},\"outputFileTracingRoot\":\"/home/saraiva-vision-site\",\"experimental\":{\"useSkewCookie\":false,\"cacheLife\":{\"default\":{\"stale\":300,\"revalidate\":900,\"expire\":4294967294},\"seconds\":{\"stale\":30,\"revalidate\":1,\"expire\":60},\"minutes\":{\"stale\":300,\"revalidate\":60,\"expire\":3600},\"hours\":{\"stale\":300,\"revalidate\":3600,\"expire\":86400},\"days\":{\"stale\":300,\"revalidate\":86400,\"expire\":604800},\"weeks\":{\"stale\":300,\"revalidate\":604800,\"expire\":2592000},\"max\":{\"stale\":300,\"revalidate\":2592000,\"expire\":4294967294}},\"cacheHandlers\":{},\"cssChunking\":true,\"multiZoneDraftMode\":false,\"appNavFailHandling\":false,\"prerenderEarlyExit\":true,\"serverMinification\":true,\"serverSourceMaps\":false,\"linkNoTouchStart\":false,\"caseSensitiveRoutes\":false,\"clientSegmentCache\":false,\"clientParamParsing\":false,\"dynamicOnHover\":false,\"preloadEntriesOnStart\":true,\"clientRouterFilter\":true,\"clientRouterFilterRedirects\":false,\"fetchCacheKeyPrefix\":\"\",\"middlewarePrefetch\":\"flexible\",\"optimisticClientCache\":true,\"manualClientBasePath\":false,\"cpus\":1,\"memoryBasedWorkersCount\":false,\"imgOptConcurrency\":null,\"imgOptTimeoutInSeconds\":7,\"imgOptMaxInputPixels\":268402689,\"imgOptSequentialRead\":null,\"imgOptSkipMetadata\":null,\"isrFlushToDisk\":true,\"workerThreads\":false,\"optimizeCss\":false,\"nextScriptWorkers\":false,\"scrollRestoration\":false,\"externalDir\":false,\"disableOptimizedLoading\":false,\"gzipSize\":true,\"craCompat\":false,\"esmExternals\":true,\"fullySpecified\":false,\"swcTraceProfiling\":false,\"forceSwcTransforms\":false,\"largePageDataBytes\":128000,\"typedEnv\":false,\"parallelServerCompiles\":false,\"parallelServerBuildTraces\":false,\"ppr\":false,\"authInterrupts\":false,\"webpackMemoryOptimizations\":false,\"optimizeServerReact\":true,\"viewTransition\":false,\"routerBFCache\":false,\"removeUncaughtErrorAndRejectionListeners\":false,\"validateRSCRequestHeaders\":false,\"staleTimes\":{\"dynamic\":0,\"static\":300},\"serverComponentsHmrCache\":true,\"staticGenerationMaxConcurrency\":8,\"staticGenerationMinPagesPerWorker\":25,\"cacheComponents\":false,\"inlineCss\":false,\"useCache\":false,\"globalNotFound\":false,\"devtoolSegmentExplorer\":true,\"browserDebugInfoInTerminal\":false,\"optimizeRouterScrolling\":false,\"optimizePackageImports\":[\"lucide-react\",\"date-fns\",\"lodash-es\",\"ramda\",\"antd\",\"react-bootstrap\",\"ahooks\",\"@ant-design/icons\",\"@headlessui/react\",\"@headlessui-float/react\",\"@heroicons/react/20/solid\",\"@heroicons/react/24/solid\",\"@heroicons/react/24/outline\",\"@visx/visx\",\"@tremor/react\",\"rxjs\",\"@mui/material\",\"@mui/icons-material\",\"recharts\",\"react-use\",\"effect\",\"@effect/schema\",\"@effect/platform\",\"@effect/platform-node\",\"@effect/platform-browser\",\"@effect/platform-bun\",\"@effect/sql\",\"@effect/sql-mssql\",\"@effect/sql-mysql2\",\"@effect/sql-pg\",\"@effect/sql-sqlite-node\",\"@effect/sql-sqlite-bun\",\"@effect/sql-sqlite-wasm\",\"@effect/sql-sqlite-react-native\",\"@effect/rpc\",\"@effect/rpc-http\",\"@effect/typeclass\",\"@effect/experimental\",\"@effect/opentelemetry\",\"@material-ui/core\",\"@material-ui/icons\",\"@tabler/icons-react\",\"mui-core\",\"react-icons/ai\",\"react-icons/bi\",\"react-icons/bs\",\"react-icons/cg\",\"react-icons/ci\",\"react-icons/di\",\"react-icons/fa\",\"react-icons/fa6\",\"react-icons/fc\",\"react-icons/fi\",\"react-icons/gi\",\"react-icons/go\",\"react-icons/gr\",\"react-icons/hi\",\"react-icons/hi2\",\"react-icons/im\",\"react-icons/io\",\"react-icons/io5\",\"react-icons/lia\",\"react-icons/lib\",\"react-icons/lu\",\"react-icons/md\",\"react-icons/pi\",\"react-icons/ri\",\"react-icons/rx\",\"react-icons/si\",\"react-icons/sl\",\"react-icons/tb\",\"react-icons/tfi\",\"react-icons/ti\",\"react-icons/vsc\",\"react-icons/wi\"]},\"htmlLimitedBots\":\"[\\\\w-]+-Google|Google-[\\\\w-]+|Chrome-Lighthouse|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti|googleweblight\",\"bundlePagesRouterDependencies\":false,\"configFile\":\"/home/saraiva-vision-site/next.config.js\",\"configFileName\":\"next.config.js\",\"outputFileTracingExcludes\":{\"*\":[\"api/**/*\"]},\"turbopack\":{\"root\":\"/home/saraiva-vision-site\"}}\nconst maybeJSONParse = (str)=>str ? JSON.parse(str) : undefined;\nconst rscManifest = (_self___RSC_MANIFEST = self.__RSC_MANIFEST) == null ? void 0 : _self___RSC_MANIFEST[\"/api/profile/route\"];\nconst rscServerManifest = maybeJSONParse(self.__RSC_SERVER_MANIFEST);\nif (rscManifest && rscServerManifest) {\n    setReferenceManifestsSingleton({\n        page: \"/api/profile/route\",\n        clientReferenceManifest: rscManifest,\n        serverActionsManifest: rscServerManifest,\n        serverModuleMap: createServerModuleMap({\n            serverActionsManifest: rscServerManifest\n        })\n    });\n}\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule, {\n    nextConfig\n});\n\n//# sourceMappingURL=edge-app-route.js.map\n","module.exports = require(\"node:buffer\");","module.exports = require(\"node:async_hooks\");","/**\n * Zod Validation Schemas for API Routes\n * Saraiva Vision - CFM/LGPD Compliant Validation\n */\n\nimport { z } from 'zod';\n\n// ============================================================================\n// Contact Form Validation\n// ============================================================================\n\n/**\n * Contact form validation schema\n * Compliant with LGPD (Brazilian data protection law)\n */\nexport const contactFormSchema = z.object({\n  name: z\n    .string()\n    .min(2, 'Nome deve ter no mínimo 2 caracteres')\n    .max(100, 'Nome deve ter no máximo 100 caracteres')\n    .regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Nome contém caracteres inválidos'),\n\n  email: z\n    .string()\n    .email('Email inválido')\n    .max(255, 'Email muito longo')\n    .toLowerCase(),\n\n  phone: z\n    .string()\n    .regex(\n      /^(?:\\+?55\\s?)?(?:\\(?\\d{2}\\)?\\s?)?(?:9\\s?)?\\d{4}[-\\s]?\\d{4}$/,\n      'Telefone inválido. Use formato: (33) 99999-9999'\n    )\n    .transform((phone) => phone.replace(/\\D/g, '')), // Remove non-digits\n\n  message: z\n    .string()\n    .min(10, 'Mensagem deve ter no mínimo 10 caracteres')\n    .max(2000, 'Mensagem deve ter no máximo 2000 caracteres')\n    .refine(\n      (msg) => msg.trim().length > 0,\n      'Mensagem não pode estar vazia'\n    ),\n\n  // Honeypot field for spam prevention\n  honeypot: z.string().optional(),\n});\n\nexport type ContactFormInput = z.infer<typeof contactFormSchema>;\n\n// ============================================================================\n// Google Reviews Validation\n// ============================================================================\n\nexport const reviewsQuerySchema = z.object({\n  placeId: z.string().optional(),\n  limit: z\n    .string()\n    .transform((val) => parseInt(val, 10))\n    .pipe(z.number().min(1).max(50))\n    .default('5'),\n  language: z\n    .string()\n    .regex(/^[a-z]{2}-[A-Z]{2}$/)\n    .default('pt-BR'),\n});\n\nexport type ReviewsQueryInput = z.infer<typeof reviewsQuerySchema>;\n\n// ============================================================================\n// Blog API Validation\n// ============================================================================\n\nexport const blogListQuerySchema = z.object({\n  page: z\n    .string()\n    .transform((val) => parseInt(val, 10))\n    .pipe(z.number().min(1))\n    .default('1'),\n  pageSize: z\n    .string()\n    .transform((val) => parseInt(val, 10))\n    .pipe(z.number().min(1).max(100))\n    .default('10'),\n  category: z.string().optional(),\n  featured: z\n    .string()\n    .transform((val) => val === 'true')\n    .pipe(z.boolean())\n    .optional(),\n  search: z.string().max(200).optional(),\n});\n\nexport type BlogListQueryInput = z.infer<typeof blogListQuerySchema>;\n\nexport const blogSlugParamSchema = z.object({\n  slug: z\n    .string()\n    .min(1)\n    .max(200)\n    .regex(/^[a-z0-9-]+$/, 'Slug inválido'),\n});\n\nexport type BlogSlugParamInput = z.infer<typeof blogSlugParamSchema>;\n\n// ============================================================================\n// Profile API Validation\n// ============================================================================\n\nexport const profileSchema = z.object({\n  profile: z.enum(['familiar', 'jovem', 'senior']),\n  source: z.enum(['manual', 'auto']).default('manual'),\n  confidence: z.number().min(0).max(1).optional(),\n});\n\nexport type ProfileInput = z.infer<typeof profileSchema>;\n\n// ============================================================================\n// Subscription API Validation (NEW for Jovem profile)\n// ============================================================================\n\nexport const createSubscriptionSchema = z.object({\n  planId: z.string().min(1, 'Plan ID é obrigatório'),\n  customerEmail: z.string().email('Email inválido'),\n  customerName: z\n    .string()\n    .min(2, 'Nome deve ter no mínimo 2 caracteres')\n    .max(100, 'Nome deve ter no máximo 100 caracteres'),\n  paymentMethodId: z.string().optional(),\n});\n\nexport type CreateSubscriptionInput = z.infer<typeof createSubscriptionSchema>;\n\nexport const subscriptionIdParamSchema = z.object({\n  id: z.string().min(1, 'Subscription ID é obrigatório'),\n});\n\nexport type SubscriptionIdParamInput = z.infer<typeof subscriptionIdParamSchema>;\n\n// ============================================================================\n// CFM Compliance Validation\n// ============================================================================\n\n/**\n * Validates medical content for CFM compliance\n * Ensures proper medical disclaimers and author information\n */\nexport const medicalContentSchema = z.object({\n  hasDisclaimer: z\n    .boolean()\n    .refine((val) => val === true, 'Aviso médico obrigatório'),\n\n  authorCRM: z\n    .string()\n    .regex(\n      /^CRM\\/[A-Z]{2}\\s\\d{4,6}$/,\n      'CRM inválido. Use formato: CRM/MG 12345'\n    ),\n\n  category: z.enum(['medical', 'educational', 'informational']),\n\n  reviewedBy: z.string().optional(),\n\n  reviewedAt: z.string().datetime().optional(),\n});\n\nexport type MedicalContentInput = z.infer<typeof medicalContentSchema>;\n\n// ============================================================================\n// LGPD Consent Validation\n// ============================================================================\n\n/**\n * Validates user consent for data processing (LGPD compliance)\n */\nexport const consentSchema = z.object({\n  analytics: z.boolean().default(false),\n  marketing: z.boolean().default(false),\n  necessary: z.boolean().default(true), // Always true\n  timestamp: z.string().datetime(),\n  userAgent: z.string().optional(),\n  ipAddress: z.string().ip().optional(),\n});\n\nexport type ConsentInput = z.infer<typeof consentSchema>;\n\n// ============================================================================\n// Security Headers Validation\n// ============================================================================\n\nexport const securityHeadersSchema = z.object({\n  'X-Content-Type-Options': z.literal('nosniff'),\n  'X-Frame-Options': z.enum(['DENY', 'SAMEORIGIN']),\n  'X-XSS-Protection': z.literal('1; mode=block'),\n  'Strict-Transport-Security': z.string().regex(/^max-age=\\d+/),\n  'Referrer-Policy': z.enum([\n    'no-referrer',\n    'strict-origin-when-cross-origin',\n    'same-origin',\n  ]),\n  'Permissions-Policy': z.string(),\n});\n\n// ============================================================================\n// Utility Functions\n// ============================================================================\n\n/**\n * Sanitize HTML content for CFM compliance\n * Removes potentially harmful tags while preserving medical formatting\n */\nexport function sanitizeMedicalContent(html: string): string {\n  // Remove script tags\n  let sanitized = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n\n  // Remove event handlers\n  sanitized = sanitized.replace(/on\\w+=\"[^\"]*\"/gi, '');\n\n  // Remove dangerous protocols\n  sanitized = sanitized.replace(/javascript:/gi, '');\n\n  return sanitized;\n}\n\n/**\n * Validate email for CFM-compliant medical communications\n */\nexport function validateMedicalEmail(email: string): boolean {\n  const schema = z.string().email();\n  const result = schema.safeParse(email);\n\n  if (!result.success) return false;\n\n  // Additional checks for medical context\n  const blockedDomains = ['tempmail.com', '10minutemail.com', 'guerrillamail.com'];\n  const domain = email.split('@')[1];\n\n  return !blockedDomains.includes(domain);\n}\n\n/**\n * Anonymize PII data for LGPD compliance in logs\n */\nexport function anonymizePII(data: Record<string, any>): Record<string, any> {\n  const sensitiveFields = ['email', 'phone', 'cpf', 'rg', 'address'];\n  const anonymized = { ...data };\n\n  for (const field of sensitiveFields) {\n    if (field in anonymized) {\n      const value = String(anonymized[field]);\n      anonymized[field] = value.slice(0, 3) + '***' + value.slice(-2);\n    }\n  }\n\n  return anonymized;\n}\n\n/**\n * Rate limit check utility\n */\nexport function checkRateLimit(\n  identifier: string,\n  maxRequests: number,\n  windowMs: number,\n  storage: Map<string, { count: number; resetAt: number }>\n): { allowed: boolean; remaining: number; resetAt: number } {\n  const now = Date.now();\n  const record = storage.get(identifier);\n\n  if (!record || now > record.resetAt) {\n    const resetAt = now + windowMs;\n    storage.set(identifier, { count: 1, resetAt });\n    return { allowed: true, remaining: maxRequests - 1, resetAt };\n  }\n\n  if (record.count >= maxRequests) {\n    return { allowed: false, remaining: 0, resetAt: record.resetAt };\n  }\n\n  record.count++;\n  return { allowed: true, remaining: maxRequests - record.count, resetAt: record.resetAt };\n}\n\n// ============================================================================\n// Appointment Validation\n// ============================================================================\n\nexport const appointmentDateTimeSchema = z.object({\n  appointment_date: z\n    .string()\n    .regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Data inválida. Use formato: YYYY-MM-DD')\n    .refine((dateStr) => {\n      const date = new Date(dateStr);\n      const dayOfWeek = date.getDay();\n      return dayOfWeek >= 1 && dayOfWeek <= 5;\n    }, 'Agendamentos são permitidos apenas de segunda a sexta-feira')\n    .refine((dateStr) => {\n      const date = new Date(dateStr);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      return date >= today;\n    }, 'A data deve ser hoje ou uma data futura'),\n\n  appointment_time: z\n    .string()\n    .regex(/^\\d{2}:\\d{2}$/, 'Horário inválido. Use formato: HH:MM')\n    .refine((timeStr) => {\n      const [hours, minutes] = timeStr.split(':').map(Number);\n      return hours >= 8 && hours < 18 && (minutes === 0 || minutes === 30);\n    }, 'Horários disponíveis: 08:00 às 18:00 em intervalos de 30 minutos'),\n});\n\nexport const createAppointmentSchema = z.object({\n  patient_name: z\n    .string()\n    .min(2, 'Nome deve ter no mínimo 2 caracteres')\n    .max(100, 'Nome deve ter no máximo 100 caracteres')\n    .regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Nome contém caracteres inválidos'),\n\n  patient_email: z\n    .string()\n    .email('Email inválido')\n    .max(255, 'Email muito longo')\n    .toLowerCase(),\n\n  patient_phone: z\n    .string()\n    .regex(\n      /^(?:\\+?55\\s?)?(?:\\(?\\d{2}\\)?\\s?)?(?:9\\s?)?\\d{4}[-\\s]?\\d{4}$/,\n      'Telefone inválido. Use formato: (33) 99999-9999'\n    )\n    .transform((phone) => phone.replace(/\\D/g, '')),\n\n  appointment_date: z\n    .string()\n    .regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Data inválida. Use formato: YYYY-MM-DD')\n    .refine((dateStr) => {\n      const date = new Date(dateStr);\n      const dayOfWeek = date.getDay();\n      return dayOfWeek >= 1 && dayOfWeek <= 5;\n    }, 'Agendamentos são permitidos apenas de segunda a sexta-feira')\n    .refine((dateStr) => {\n      const date = new Date(dateStr);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      return date >= today;\n    }, 'A data deve ser hoje ou uma data futura'),\n\n  appointment_time: z\n    .string()\n    .regex(/^\\d{2}:\\d{2}$/, 'Horário inválido. Use formato: HH:MM')\n    .refine((timeStr) => {\n      const [hours, minutes] = timeStr.split(':').map(Number);\n      return hours >= 8 && hours < 18 && (minutes === 0 || minutes === 30);\n    }, 'Horários disponíveis: 08:00 às 18:00 em intervalos de 30 minutos'),\n\n  notes: z\n    .string()\n    .max(1000, 'Observações devem ter no máximo 1000 caracteres')\n    .optional()\n    .default(''),\n\n  honeypot: z.string().optional(),\n});\n\nexport type CreateAppointmentInput = z.infer<typeof createAppointmentSchema>;\n\nexport const availabilityQuerySchema = z.object({\n  days: z\n    .string()\n    .transform((val) => parseInt(val, 10))\n    .pipe(z.number().min(1).max(30))\n    .default('14'),\n  startDate: z\n    .string()\n    .regex(/^\\d{4}-\\d{2}-\\d{2}$/)\n    .optional(),\n  endDate: z\n    .string()\n    .regex(/^\\d{4}-\\d{2}-\\d{2}$/)\n    .optional(),\n});\n\nexport type AvailabilityQueryInput = z.infer<typeof availabilityQuerySchema>;\n"],"names":["POST","request","body","json","validationResult","profileSchema","safeParse","success","NextResponse","error","details","flatten","fieldErrors","status","profile","source","confidence","data","response","detectedAt","Date","toISOString","message","cookieResponse","cookies","set","httpOnly","secure","process","sameSite","maxAge","path","console","GET","get","value","runtime","z","name","min","max","regex","email","toLowerCase","phone","transform","replace","refine","msg","trim","length","honeypot","optional","reviewsQuerySchema","placeId","limit","val","parseInt","pipe","default","language","page","pageSize","category","featured","search","slug","planId","customerEmail","customerName","paymentMethodId","id","hasDisclaimer","authorCRM","reviewedBy","reviewedAt","datetime","analytics","marketing","necessary","timestamp","userAgent","ipAddress","ip","appointment_date","dayOfWeek","dateStr","getDay","date","today","setHours","appointment_time","hours","minutes","timeStr","split","map","Number","patient_name","patient_email","patient_phone","notes","days","startDate","endDate"],"sourceRoot":"","ignoreList":[]}