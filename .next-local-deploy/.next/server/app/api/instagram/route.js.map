{"version":3,"file":"app/api/instagram/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/./app/api/instagram/route.ts","webpack://_N_E/./app/api/instagram/route.ts?565d","webpack://_N_E/?a4b7"],"sourcesContent":["module.exports = require(\"node:buffer\");","module.exports = require(\"node:async_hooks\");","import { NextRequest, NextResponse } from 'next/server';\nimport type { InstagramApiResponse, InstagramError, InstagramPost } from '@/types/instagram';\n\nlet instagramCache: {\n  data: InstagramApiResponse | null;\n  timestamp: number;\n} = {\n  data: null,\n  timestamp: 0,\n};\n\nconst CACHE_TTL = 5 * 60 * 1000;\n\nconst FALLBACK_POSTS: InstagramPost[] = [\n  {\n    id: 'fallback-1',\n    caption: 'Cuidando da sua vis√£o com tecnologia e excel√™ncia. #oftalmologia #sa√∫deocular',\n    media_type: 'IMAGE',\n    media_url: '/img/hero.avif',\n    permalink: 'https://instagram.com/saraivavision',\n    timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    username: 'saraivavision',\n    fallback: true,\n  },\n  {\n    id: 'fallback-2',\n    caption: 'Equipamentos de √∫ltima gera√ß√£o para diagn√≥stico preciso. #tecnologiamedica',\n    media_type: 'IMAGE',\n    media_url: '/img/hero.avif',\n    permalink: 'https://instagram.com/saraivavision',\n    timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n    username: 'saraivavision',\n    fallback: true,\n  },\n  {\n    id: 'fallback-3',\n    caption: 'Nosso compromisso √© com a sua sa√∫de visual. Agende sua consulta! üëì',\n    media_type: 'IMAGE',\n    media_url: '/img/hero.avif',\n    permalink: 'https://instagram.com/saraivavision',\n    timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n    username: 'saraivavision',\n    fallback: true,\n  },\n  {\n    id: 'fallback-4',\n    caption: 'Equipe especializada em oftalmologia. Confie nos melhores! ‚ú®',\n    media_type: 'IMAGE',\n    media_url: '/img/hero.avif',\n    permalink: 'https://instagram.com/saraivavision',\n    timestamp: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n    username: 'saraivavision',\n    fallback: true,\n  },\n];\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const limit = parseInt(searchParams.get('limit') || '4', 10);\n    const includeStats = searchParams.get('includeStats') !== 'false';\n\n    const now = Date.now();\n    if (instagramCache.data && now - instagramCache.timestamp < CACHE_TTL) {\n      console.log('Returning cached Instagram posts');\n      return NextResponse.json(instagramCache.data, {\n        status: 200,\n        headers: {\n          'Cache-Control': 'public, s-maxage=300, stale-while-revalidate=600',\n          'X-Cache': 'HIT',\n        },\n      });\n    }\n\n    const accessToken = process.env.INSTAGRAM_ACCESS_TOKEN;\n    const instagramUserId = process.env.INSTAGRAM_USER_ID;\n\n    if (!accessToken || !instagramUserId || accessToken === 'your_instagram_token_here') {\n      console.warn('Instagram API not configured, using fallback data');\n      \n      const fallbackResponse: InstagramApiResponse = {\n        success: true,\n        posts: FALLBACK_POSTS.slice(0, limit),\n        cached: false,\n        total: FALLBACK_POSTS.length,\n        timestamp: new Date().toISOString(),\n        source: 'fallback',\n      };\n\n      instagramCache = {\n        data: fallbackResponse,\n        timestamp: now,\n      };\n\n      return NextResponse.json(fallbackResponse, {\n        status: 200,\n        headers: {\n          'Cache-Control': 'public, s-maxage=300, stale-while-revalidate=600',\n          'X-Cache': 'MISS',\n        },\n      });\n    }\n\n    const fields = 'id,caption,media_type,media_url,thumbnail_url,permalink,timestamp,username';\n    const apiUrl = `https://graph.instagram.com/${instagramUserId}/media?fields=${fields}&access_token=${accessToken}&limit=${limit}`;\n\n    console.log('Fetching Instagram posts from Graph API');\n\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n    const response = await fetch(apiUrl, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n      },\n      signal: controller.signal,\n    });\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      throw new Error(`Instagram API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (!data.data || !Array.isArray(data.data)) {\n      throw new Error('Invalid response format from Instagram API');\n    }\n\n    const posts: InstagramPost[] = data.data.map((post: any) => ({\n      id: post.id,\n      caption: post.caption || '',\n      media_type: post.media_type || 'IMAGE',\n      media_url: post.media_url,\n      thumbnail_url: post.thumbnail_url,\n      permalink: post.permalink,\n      timestamp: post.timestamp,\n      username: post.username || 'saraivavision',\n      fallback: false,\n    }));\n\n    const result: InstagramApiResponse = {\n      success: true,\n      posts,\n      cached: false,\n      total: posts.length,\n      timestamp: new Date().toISOString(),\n      source: 'instagram-graph-api',\n    };\n\n    instagramCache = {\n      data: result,\n      timestamp: now,\n    };\n\n    console.log(`Successfully fetched ${posts.length} Instagram posts`);\n\n    return NextResponse.json(result, {\n      status: 200,\n      headers: {\n        'Cache-Control': 'public, s-maxage=300, stale-while-revalidate=600',\n        'X-Cache': 'MISS',\n      },\n    });\n  } catch (error: any) {\n    console.error('Instagram API Error:', error);\n\n    const errorResponse: InstagramError = {\n      success: false,\n      error: error.message || 'Failed to fetch Instagram posts',\n      timestamp: new Date().toISOString(),\n    };\n\n    return NextResponse.json(errorResponse, { status: 500 });\n  }\n}\n\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}\n\nexport const runtime = 'edge';\nexport const dynamic = 'force-dynamic';\n","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/lib/constants\";\nimport { NoFallbackError } from \"next/dist/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/server/response-cache\";\nimport * as userland from \"/home/saraiva-vision-site/app/api/instagram/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/instagram/route\",\n        pathname: \"/api/instagram\",\n        filename: \"route\",\n        bundlePath: \"app/api/instagram/route\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"/home/saraiva-vision-site/app/api/instagram/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/instagram/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","var _self___RSC_MANIFEST;\nimport { createServerModuleMap } from \"next/dist/server/app-render/action-utils\";\nimport { setReferenceManifestsSingleton } from \"next/dist/server/app-render/encryption-utils\";\nimport { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Finstagram%2Froute&page=%2Fapi%2Finstagram%2Froute&pagePath=private-next-app-dir%2Fapi%2Finstagram%2Froute.ts&appDir=%2Fhome%2Fsaraiva-vision-site%2Fapp&appPaths=%2Fapi%2Finstagram%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!private-next-app-dir/api/instagram/route.ts?__next_edge_ssr_entry__\";\nconst nextConfig = {\"env\":{},\"eslint\":{\"ignoreDuringBuilds\":true},\"typescript\":{\"ignoreBuildErrors\":true,\"tsconfigPath\":\"tsconfig.json\"},\"typedRoutes\":false,\"distDir\":\".next\",\"cleanDistDir\":true,\"assetPrefix\":\"\",\"cacheMaxMemorySize\":52428800,\"configOrigin\":\"next.config.js\",\"useFileSystemPublicRoutes\":true,\"generateEtags\":true,\"pageExtensions\":[\"tsx\",\"ts\",\"jsx\",\"js\"],\"poweredByHeader\":false,\"compress\":true,\"images\":{\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"loaderFile\":\"\",\"domains\":[],\"disableStaticImages\":false,\"minimumCacheTTL\":60,\"formats\":[\"image/webp\"],\"dangerouslyAllowSVG\":false,\"contentSecurityPolicy\":\"script-src 'none'; frame-src 'none'; sandbox;\",\"contentDispositionType\":\"attachment\",\"remotePatterns\":[],\"unoptimized\":false},\"devIndicators\":{\"position\":\"bottom-left\"},\"onDemandEntries\":{\"maxInactiveAge\":60000,\"pagesBufferLength\":5},\"amp\":{\"canonicalBase\":\"\"},\"basePath\":\"\",\"sassOptions\":{},\"trailingSlash\":false,\"i18n\":null,\"productionBrowserSourceMaps\":false,\"excludeDefaultMomentLocales\":true,\"serverRuntimeConfig\":{},\"publicRuntimeConfig\":{},\"reactProductionProfiling\":false,\"reactStrictMode\":true,\"reactMaxHeadersLength\":6000,\"httpAgentOptions\":{\"keepAlive\":true},\"logging\":{},\"compiler\":{},\"expireTime\":31536000,\"staticPageGenerationTimeout\":60,\"output\":\"standalone\",\"modularizeImports\":{\"@mui/icons-material\":{\"transform\":\"@mui/icons-material/{{member}}\"},\"lodash\":{\"transform\":\"lodash/{{member}}\"}},\"outputFileTracingRoot\":\"/home/saraiva-vision-site\",\"experimental\":{\"useSkewCookie\":false,\"cacheLife\":{\"default\":{\"stale\":300,\"revalidate\":900,\"expire\":4294967294},\"seconds\":{\"stale\":30,\"revalidate\":1,\"expire\":60},\"minutes\":{\"stale\":300,\"revalidate\":60,\"expire\":3600},\"hours\":{\"stale\":300,\"revalidate\":3600,\"expire\":86400},\"days\":{\"stale\":300,\"revalidate\":86400,\"expire\":604800},\"weeks\":{\"stale\":300,\"revalidate\":604800,\"expire\":2592000},\"max\":{\"stale\":300,\"revalidate\":2592000,\"expire\":4294967294}},\"cacheHandlers\":{},\"cssChunking\":true,\"multiZoneDraftMode\":false,\"appNavFailHandling\":false,\"prerenderEarlyExit\":true,\"serverMinification\":true,\"serverSourceMaps\":false,\"linkNoTouchStart\":false,\"caseSensitiveRoutes\":false,\"clientSegmentCache\":false,\"clientParamParsing\":false,\"dynamicOnHover\":false,\"preloadEntriesOnStart\":true,\"clientRouterFilter\":true,\"clientRouterFilterRedirects\":false,\"fetchCacheKeyPrefix\":\"\",\"middlewarePrefetch\":\"flexible\",\"optimisticClientCache\":true,\"manualClientBasePath\":false,\"cpus\":1,\"memoryBasedWorkersCount\":false,\"imgOptConcurrency\":null,\"imgOptTimeoutInSeconds\":7,\"imgOptMaxInputPixels\":268402689,\"imgOptSequentialRead\":null,\"imgOptSkipMetadata\":null,\"isrFlushToDisk\":true,\"workerThreads\":false,\"optimizeCss\":false,\"nextScriptWorkers\":false,\"scrollRestoration\":false,\"externalDir\":false,\"disableOptimizedLoading\":false,\"gzipSize\":true,\"craCompat\":false,\"esmExternals\":true,\"fullySpecified\":false,\"swcTraceProfiling\":false,\"forceSwcTransforms\":false,\"largePageDataBytes\":128000,\"typedEnv\":false,\"parallelServerCompiles\":false,\"parallelServerBuildTraces\":false,\"ppr\":false,\"authInterrupts\":false,\"webpackMemoryOptimizations\":false,\"optimizeServerReact\":true,\"viewTransition\":false,\"routerBFCache\":false,\"removeUncaughtErrorAndRejectionListeners\":false,\"validateRSCRequestHeaders\":false,\"staleTimes\":{\"dynamic\":0,\"static\":300},\"serverComponentsHmrCache\":true,\"staticGenerationMaxConcurrency\":8,\"staticGenerationMinPagesPerWorker\":25,\"cacheComponents\":false,\"inlineCss\":false,\"useCache\":false,\"globalNotFound\":false,\"devtoolSegmentExplorer\":true,\"browserDebugInfoInTerminal\":false,\"optimizeRouterScrolling\":false,\"optimizePackageImports\":[\"lucide-react\",\"date-fns\",\"lodash-es\",\"ramda\",\"antd\",\"react-bootstrap\",\"ahooks\",\"@ant-design/icons\",\"@headlessui/react\",\"@headlessui-float/react\",\"@heroicons/react/20/solid\",\"@heroicons/react/24/solid\",\"@heroicons/react/24/outline\",\"@visx/visx\",\"@tremor/react\",\"rxjs\",\"@mui/material\",\"@mui/icons-material\",\"recharts\",\"react-use\",\"effect\",\"@effect/schema\",\"@effect/platform\",\"@effect/platform-node\",\"@effect/platform-browser\",\"@effect/platform-bun\",\"@effect/sql\",\"@effect/sql-mssql\",\"@effect/sql-mysql2\",\"@effect/sql-pg\",\"@effect/sql-sqlite-node\",\"@effect/sql-sqlite-bun\",\"@effect/sql-sqlite-wasm\",\"@effect/sql-sqlite-react-native\",\"@effect/rpc\",\"@effect/rpc-http\",\"@effect/typeclass\",\"@effect/experimental\",\"@effect/opentelemetry\",\"@material-ui/core\",\"@material-ui/icons\",\"@tabler/icons-react\",\"mui-core\",\"react-icons/ai\",\"react-icons/bi\",\"react-icons/bs\",\"react-icons/cg\",\"react-icons/ci\",\"react-icons/di\",\"react-icons/fa\",\"react-icons/fa6\",\"react-icons/fc\",\"react-icons/fi\",\"react-icons/gi\",\"react-icons/go\",\"react-icons/gr\",\"react-icons/hi\",\"react-icons/hi2\",\"react-icons/im\",\"react-icons/io\",\"react-icons/io5\",\"react-icons/lia\",\"react-icons/lib\",\"react-icons/lu\",\"react-icons/md\",\"react-icons/pi\",\"react-icons/ri\",\"react-icons/rx\",\"react-icons/si\",\"react-icons/sl\",\"react-icons/tb\",\"react-icons/tfi\",\"react-icons/ti\",\"react-icons/vsc\",\"react-icons/wi\"]},\"htmlLimitedBots\":\"[\\\\w-]+-Google|Google-[\\\\w-]+|Chrome-Lighthouse|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti|googleweblight\",\"bundlePagesRouterDependencies\":false,\"configFile\":\"/home/saraiva-vision-site/next.config.js\",\"configFileName\":\"next.config.js\",\"outputFileTracingExcludes\":{\"*\":[\"api/**/*\"]},\"turbopack\":{\"root\":\"/home/saraiva-vision-site\"}}\nconst maybeJSONParse = (str)=>str ? JSON.parse(str) : undefined;\nconst rscManifest = (_self___RSC_MANIFEST = self.__RSC_MANIFEST) == null ? void 0 : _self___RSC_MANIFEST[\"/api/instagram/route\"];\nconst rscServerManifest = maybeJSONParse(self.__RSC_SERVER_MANIFEST);\nif (rscManifest && rscServerManifest) {\n    setReferenceManifestsSingleton({\n        page: \"/api/instagram/route\",\n        clientReferenceManifest: rscManifest,\n        serverActionsManifest: rscServerManifest,\n        serverModuleMap: createServerModuleMap({\n            serverActionsManifest: rscServerManifest\n        })\n    });\n}\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule, {\n    nextConfig\n});\n\n//# sourceMappingURL=edge-app-route.js.map\n"],"names":["instagramCache","data","timestamp","FALLBACK_POSTS","id","caption","media_type","media_url","permalink","Date","now","toISOString","username","fallback","GET","request","searchParams","URL","url","limit","parseInt","get","CACHE_TTL","console","log","NextResponse","json","status","headers","accessToken","process","env","INSTAGRAM_ACCESS_TOKEN","instagramUserId","INSTAGRAM_USER_ID","warn","fallbackResponse","success","posts","slice","cached","total","length","source","apiUrl","fields","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","Accept","signal","clearTimeout","ok","Array","isArray","map","post","thumbnail_url","result","error","errorResponse","message","OPTIONS","runtime"],"sourceRoot":"","ignoreList":[]}