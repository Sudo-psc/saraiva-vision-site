# Service: WordPress
# Description: WordPress CMS container with PHP-FPM and SQLite support for Saraiva Vision medical website
# Base Image: wordpress:6.4-php8.2-fpm-alpine
# Maintainer: Saraiva Vision Development Team
# Security: Non-root user, read-only filesystem where possible

FROM wordpress:6.4-php8.2-fpm-alpine

# Install additional dependencies
RUN apk upgrade --no-cache && \
    apk add --no-cache \
    sqlite \
    sqlite-dev \
    curl \
    tini \
    nginx \
    supervisor

# Install SQLite support for WordPress
RUN docker-php-ext-install pdo_sqlite

# Create non-root user for WordPress
RUN addgroup -g 1001 -S wordpress && \
    adduser -S wordpress -u 1001 -G wordpress -G www-data

# Set working directory
WORKDIR /var/www/html

# Copy WordPress configuration
COPY --chown=wordpress:www-data wordpress-local/wp-config.php ./
COPY --chown=wordpress:www-data wordpress-local/.htaccess ./

# Create WordPress configuration if it doesn't exist
RUN if [ ! -f wp-config.php ]; then \
    echo "<?php" > wp-config.php && \
    echo "// WordPress Docker Configuration" >> wp-config.php && \
    echo "define('DB_NAME', '/var/www/html/wp-content/database.sqlite');" >> wp-config.php && \
    echo "define('DB_USER', 'wordpress');" >> wp-config.php && \
    echo "define('DB_PASSWORD', '');" >> wp-config.php && \
    echo "define('DB_HOST', '');" >> wp-config.php && \
    echo "define('DB_CHARSET', 'utf8');" >> wp-config.php && \
    echo "define('DB_COLLATE', '');" >> wp-config.php && \
    echo "" >> wp-config.php && \
    echo "// Authentication unique keys and salts" >> wp-config.php && \
    echo "define('AUTH_KEY',         '$(openssl rand -base64 32)');" >> wp-config.php && \
    echo "define('SECURE_AUTH_KEY',  '$(openssl rand -base64 32)');" >> wp-config.php && \
    echo "define('LOGGED_IN_KEY',    '$(openssl rand -base64 32)');" >> wp-config.php && \
    echo "define('NONCE_KEY',        '$(openssl rand -base64 32)');" >> wp-config.php && \
    echo "define('AUTH_SALT',        '$(openssl rand -base64 32)');" >> wp-config.php && \
    echo "define('SECURE_AUTH_SALT', '$(openssl rand -base64 32)');" >> wp-config.php && \
    echo "define('LOGGED_IN_SALT',   '$(openssl rand -base64 32)');" >> wp-config.php && \
    echo "define('NONCE_SALT',       '$(openssl rand -base64 32)');" >> wp-config.php && \
    echo "" >> wp-config.php && \
    echo "// WordPress database table prefix" >> wp-config.php && \
    echo "\$table_prefix = 'wp_';" >> wp-config.php && \
    echo "" >> wp-config.php && \
    echo "// WordPress debug settings" >> wp-config.php && \
    echo "define('WP_DEBUG', false);" >> wp-config.php && \
    echo "define('WP_DEBUG_LOG', false);" >> wp-config.php && \
    echo "define('WP_DEBUG_DISPLAY', false);" >> wp-config.php && \
    echo "" >> wp-config.php && \
    echo "// SQLite configuration" >> wp-config.php && \
    echo "define('USE_MYSQL', false);" >> wp-config.php && \
    echo "define('DB_FILE', 'database.sqlite');" >> wp-config.php && \
    echo "define('DB_DIR', '/var/www/html/wp-content/');" >> wp-config.php && \
    echo "" >> wp-config.php && \
    echo "// Container-specific settings" >> wp-config.php && \
    echo "define('WP_HOME', 'http://localhost:9000');" >> wp-config.php && \
    echo "define('WP_SITEURL', 'http://localhost:9000');" >> wp-config.php && \
    echo "define('AUTOMATIC_UPDATER_DISABLED', true);" >> wp-config.php && \
    echo "define('WP_AUTO_UPDATE_CORE', false);" >> wp-config.php && \
    echo "" >> wp-config.php && \
    echo "// Load WordPress" >> wp-config.php && \
    echo "if (!defined('ABSPATH')) {" >> wp-config.php && \
    echo "    define('ABSPATH', __DIR__ . '/');" >> wp-config.php && \
    echo "}" >> wp-config.php && \
    echo "require_once ABSPATH . 'wp-settings.php';" >> wp-config.php; \
    fi

# Install SQLite integration plugin
RUN curl -L https://downloads.wordpress.org/plugin/sqlite-database-integration.2.1.0.zip -o sqlite-plugin.zip && \
    unzip sqlite-plugin.zip -d wp-content/plugins/ && \
    rm sqlite-plugin.zip

# Create necessary directories
RUN mkdir -p \
    /var/www/html/wp-content/uploads \
    /var/www/html/wp-content/cache \
    /var/www/html/wp-content/themes \
    /var/www/html/wp-content/plugins \
    /var/log/nginx \
    /var/log/supervisor \
    /run/nginx

# Set up Nginx configuration for WordPress
RUN echo 'server {' > /etc/nginx/http.d/default.conf && \
    echo '    listen 9000;' >> /etc/nginx/http.d/default.conf && \
    echo '    server_name localhost;' >> /etc/nginx/http.d/default.conf && \
    echo '    root /var/www/html;' >> /etc/nginx/http.d/default.conf && \
    echo '    index index.php index.html;' >> /etc/nginx/http.d/default.conf && \
    echo '' >> /etc/nginx/http.d/default.conf && \
    echo '    # WordPress permalinks' >> /etc/nginx/http.d/default.conf && \
    echo '    location / {' >> /etc/nginx/http.d/default.conf && \
    echo '        try_files $uri $uri/ /index.php?$args;' >> /etc/nginx/http.d/default.conf && \
    echo '    }' >> /etc/nginx/http.d/default.conf && \
    echo '' >> /etc/nginx/http.d/default.conf && \
    echo '    # PHP processing' >> /etc/nginx/http.d/default.conf && \
    echo '    location ~ \.php$ {' >> /etc/nginx/http.d/default.conf && \
    echo '        fastcgi_pass 127.0.0.1:9000;' >> /etc/nginx/http.d/default.conf && \
    echo '        fastcgi_index index.php;' >> /etc/nginx/http.d/default.conf && \
    echo '        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;' >> /etc/nginx/http.d/default.conf && \
    echo '        include fastcgi_params;' >> /etc/nginx/http.d/default.conf && \
    echo '    }' >> /etc/nginx/http.d/default.conf && \
    echo '' >> /etc/nginx/http.d/default.conf && \
    echo '    # Health check endpoint' >> /etc/nginx/http.d/default.conf && \
    echo '    location /health {' >> /etc/nginx/http.d/default.conf && \
    echo '        access_log off;' >> /etc/nginx/http.d/default.conf && \
    echo '        return 200 "{\\"status\\":\\"healthy\\",\\"service\\":\\"wordpress\\",\\"timestamp\\":\\"$(date -Iseconds)\\"}";' >> /etc/nginx/http.d/default.conf && \
    echo '        add_header Content-Type application/json;' >> /etc/nginx/http.d/default.conf && \
    echo '    }' >> /etc/nginx/http.d/default.conf && \
    echo '' >> /etc/nginx/http.d/default.conf && \
    echo '    # Security headers' >> /etc/nginx/http.d/default.conf && \
    echo '    add_header X-Frame-Options "SAMEORIGIN" always;' >> /etc/nginx/http.d/default.conf && \
    echo '    add_header X-Content-Type-Options "nosniff" always;' >> /etc/nginx/http.d/default.conf && \
    echo '    add_header X-XSS-Protection "1; mode=block" always;' >> /etc/nginx/http.d/default.conf && \
    echo '' >> /etc/nginx/http.d/default.conf && \
    echo '    # Static files caching' >> /etc/nginx/http.d/default.conf && \
    echo '    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {' >> /etc/nginx/http.d/default.conf && \
    echo '        expires 1y;' >> /etc/nginx/http.d/default.conf && \
    echo '        add_header Cache-Control "public, immutable";' >> /etc/nginx/http.d/default.conf && \
    echo '    }' >> /etc/nginx/http.d/default.conf && \
    echo '}' >> /etc/nginx/http.d/default.conf

# Create supervisor configuration
RUN echo '[supervisord]' > /etc/supervisor/supervisord.conf && \
    echo 'nodaemon=true' >> /etc/supervisor/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/supervisord.conf && \
    echo 'logfile=/var/log/supervisor/supervisord.log' >> /etc/supervisor/supervisord.conf && \
    echo 'pidfile=/var/run/supervisord.pid' >> /etc/supervisor/supervisord.conf && \
    echo '' >> /etc/supervisor/supervisord.conf && \
    echo '[program:php-fpm]' >> /etc/supervisor/supervisord.conf && \
    echo 'command=php-fpm --nodaemonize' >> /etc/supervisor/supervisord.conf && \
    echo 'user=www-data' >> /etc/supervisor/supervisord.conf && \
    echo 'autostart=true' >> /etc/supervisor/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisor/supervisord.conf && \
    echo 'stdout_logfile=/var/log/supervisor/php-fpm.log' >> /etc/supervisor/supervisord.conf && \
    echo 'stderr_logfile=/var/log/supervisor/php-fpm-error.log' >> /etc/supervisor/supervisord.conf && \
    echo '' >> /etc/supervisor/supervisord.conf && \
    echo '[program:nginx]' >> /etc/supervisor/supervisord.conf && \
    echo 'command=nginx -g "daemon off;"' >> /etc/supervisor/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/supervisord.conf && \
    echo 'autostart=true' >> /etc/supervisor/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisor/supervisord.conf && \
    echo 'stdout_logfile=/var/log/supervisor/nginx.log' >> /etc/supervisor/supervisord.conf && \
    echo 'stderr_logfile=/var/log/supervisor/nginx-error.log' >> /etc/supervisor/supervisord.conf

# Create health check script
RUN echo '#!/bin/sh' > /usr/local/bin/health-check.sh && \
    echo 'curl -f http://localhost:9000/health || exit 1' >> /usr/local/bin/health-check.sh && \
    chmod +x /usr/local/bin/health-check.sh

# Set proper permissions
RUN chown -R wordpress:www-data /var/www/html && \
    chmod -R 755 /var/www/html && \
    chmod -R 775 /var/www/html/wp-content && \
    chown -R wordpress:www-data /var/log/nginx && \
    chown -R wordpress:www-data /var/log/supervisor && \
    chown -R wordpress:www-data /run/nginx

# Security hardening
RUN rm -rf /var/cache/apk/* && \
    rm -rf /tmp/* && \
    rm -rf /usr/share/man/* && \
    rm -rf /usr/share/doc/*

# Expose the port
EXPOSE 9000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start supervisor to manage both PHP-FPM and Nginx
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]

# Labels
LABEL maintainer="Saraiva Vision Dev Team" \
      version="2.1.0" \
      description="WordPress CMS container for Saraiva Vision medical website" \
      security.non-root="true" \
      security.readonly-root="true"