# ==============================================================================
# Saraiva Vision - Hybrid Nginx Configuration
# Data: 2025-10-05
# Arquitetura: Static Site (Vite) + Next.js API Routes + Node.js Backend
# ==============================================================================

# Upstream para Next.js (API Routes)
upstream nextjs_api {
    server 127.0.0.1:3002;
    keepalive 32;
}

# Upstream para Node.js Backend (se necessário)
upstream nodejs_backend {
    server 127.0.0.1:3001;
    keepalive 32;
}

# ==============================================================================
# HTTPS Server
# ==============================================================================
server {
    listen 443 ssl http2;
    server_name saraivavision.com.br www.saraivavision.com.br;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/saraivavision.com.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/saraivavision.com.br/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Root directory (build estático Vite/React)
    root /var/www/saraivavision/current;
    index index.html;

    # Charset
    charset utf-8;

    # Logs
    access_log /var/log/nginx/saraivavision.access.log;
    error_log /var/log/nginx/saraivavision.error.log warn;

    # ============================================================
    # API Routes - Next.js (Ninsaúde Integration)
    # ============================================================
    location /api/ninsaude/ {
        proxy_pass http://nextjs_api;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        
        # Timeouts
        proxy_read_timeout 60s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        
        # Cache bypass
        proxy_cache_bypass $http_upgrade;
        
        # No cache para APIs
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        add_header Pragma "no-cache";
        
        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    }

    # ============================================================
    # Backend API (Node.js) - Se necessário
    # ============================================================
    location /api/ {
        # Se tiver outras APIs, proxy para nodejs_backend
        # Caso contrário, pode comentar esta seção
        proxy_pass http://nodejs_backend;
        proxy_http_version 1.1;
        
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_cache_bypass $http_upgrade;
        
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }

    # ============================================================
    # Health Check
    # ============================================================
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # ============================================================
    # Static Assets - Long Cache
    # ============================================================
    
    # Immutable assets (hashed filenames)
    location ~* ^/assets/.*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|avif|webp)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Other images and fonts
    location ~* \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|avif|webp)$ {
        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
        access_log off;
        
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # CSS and JS (if not in /assets/)
    location ~* \.(css|js)$ {
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
        
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
    }

    # ============================================================
    # Service Worker - No Cache
    # ============================================================
    location ~ ^/(sw\.js|service-worker\.js|workbox-.*\.js)$ {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        add_header Pragma "no-cache";
        
        add_header Service-Worker-Allowed "/";
        add_header X-Content-Type-Options "nosniff" always;
    }

    # ============================================================
    # Meta Files
    # ============================================================
    location ~* \.(webmanifest|manifest\.json|browserconfig\.xml)$ {
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
        add_header Content-Type application/json;
    }
    
    location = /robots.txt {
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
        log_not_found off;
    }
    
    location = /sitemap.xml {
        expires 1d;
        add_header Cache-Control "public, max-age=86400";
        log_not_found off;
    }

    # ============================================================
    # Security - Deny dotfiles
    # ============================================================
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # ============================================================
    # SPA Fallback - React Router
    # ============================================================
    location / {
        try_files $uri $uri/ /index.html;
        
        # HTML no cache
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
            add_header Pragma "no-cache";
        }
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    }

    # ============================================================
    # Compression
    # ============================================================
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/rss+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;
}

# ==============================================================================
# HTTP to HTTPS redirect
# ==============================================================================
server {
    listen 80;
    server_name saraivavision.com.br www.saraivavision.com.br;
    
    # ACME challenge for Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect everything else to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}
