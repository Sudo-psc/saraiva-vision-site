# CORS Configuration Fix for Saraiva Vision Clinic
# Solução para problema "Access-Control-Allow-Origin cannot contain more than one origin"
# 
# PROBLEMA IDENTIFICADO:
# Headers CORS duplicados entre WordPress (origem) e Nginx (proxy)
# Causa: Nginx estava adicionando headers CORS sobre os headers já existentes do WordPress
# 
# SOLUÇÃO:
# 1. Remover headers CORS do Nginx
# 2. Deixar WordPress gerenciar CORS nativamente
# 3. Configurar redirecionamento canônico www/não-www
#
# Clínica Médica: Requer segurança adicional para LGPD e dados médicos

# HTTP to HTTPS redirect with canonical www handling
server {
    listen 80;
    listen [::]:80;
    server_name saraivavision.com.br www.saraivavision.com.br;

    # ACME challenge for SSL certificate renewal
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
        default_type text/plain;
    }

    # Canonical redirect: www.saraivavision.com.br -> saraivavision.com.br
    if ($host = "www.saraivavision.com.br") {
        return 301 https://saraivavision.com.br$request_uri;
    }

    # Redirect HTTP to HTTPS
    return 301 https://saraivavision.com.br$request_uri;
}

# HTTPS server with CORS fix
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name saraivavision.com.br www.saraivavision.com.br;
    root /var/www/saraivavision/current;
    index index.html;

    # Canonical redirect for HTTPS: www -> non-www
    if ($host = "www.saraivavision.com.br") {
        return 301 https://saraivavision.com.br$request_uri;
    }

    # SSL Configuration (unchanged)
    ssl_certificate /etc/letsencrypt/live/saraivavision.com.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/saraivavision.com.br/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/saraivavision.com.br/chain.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security Headers (medical clinic compliance)
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;

    # Medical data protection headers
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Resource-Policy "same-origin" always;

    # Content Security Policy for medical website
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://www.googletagmanager.com https://www.google-analytics.com https://maps.googleapis.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https://maps.googleapis.com https://maps.gstatic.com https://storage.googleapis.com; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https://www.google-analytics.com https://maps.googleapis.com; frame-src 'self' https://www.google.com; object-src 'none'; base-uri 'self'; form-action 'self';" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/json application/xml+rss application/atom+xml image/svg+xml;

    # Static assets with caching
    location ~* \.(js|css|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif|png)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        access_log off;
    }

    # PWA files
    location ~* \.(webmanifest|xml|txt)$ {
        add_header Cache-Control "public, max-age=86400";
    }

    # SPA routing
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # API endpoints
    location /api/ {
        proxy_pass http://localhost:3001/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # WordPress proxy - CORS FIX: Remove duplicate headers
    location /wp-admin/ {
        proxy_pass http://localhost:8083/wp-admin/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # WordPress REST API - CORS FIX: Let WordPress handle CORS natively
    location /wp-json/ {
        proxy_pass http://localhost:8083/wp-json/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # REMOVED: Duplicate CORS headers that were causing the error
        # WordPress will handle CORS natively without duplication
        # This fixes "Access-Control-Allow-Origin cannot contain more than one origin"
    }

    # Security: deny access to sensitive files (medical compliance)
    location ~* \.(env|log|htaccess|htpasswd|git|svn|DS_Store)$ {
        deny all;
        return 404;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"healthy","service":"nginx","timestamp":"healthy","version":"1.0.0","environment":"production"}';
        add_header Content-Type application/json;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /index.html;
}