# SaraivaVision Staging Configuration
# Testing environment with SSL but relaxed security for debugging

# Upstream for staging WordPress
upstream wordpress_staging {
    server 127.0.0.1:8082;
    keepalive 4;
}

# Rate limiting (more permissive than production)
limit_req_zone $binary_remote_addr zone=staging_api:10m rate=45r/m;
limit_req_zone $binary_remote_addr zone=staging_login:10m rate=10r/m;

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name staging.saraivavision.com.br;

    # ACME challenge for staging SSL
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
        default_type text/plain;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# Staging HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name staging.saraivavision.com.br;

    # Basic server settings
    server_tokens off;
    client_max_body_size 25m;

    # Document root
    root /var/www/saraivavision-staging/current;
    index index.html;

    # SSL Configuration (staging certificates)
    ssl_certificate /etc/letsencrypt/live/staging.saraivavision.com.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/staging.saraivavision.com.br/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_protocols TLSv1.2 TLSv1.3;

    # Relaxed CSP for staging (allows easier debugging)
    add_header Content-Security-Policy "
        default-src 'self' 'unsafe-inline' 'unsafe-eval';
        script-src 'self' 'unsafe-inline' 'unsafe-eval' https: data:;
        style-src 'self' 'unsafe-inline' https:;
        img-src 'self' https: data: blob:;
        connect-src 'self' https: wss:;
        font-src 'self' https: data:;
        frame-src 'self' https:;
        object-src 'none';
    " always;

    # Staging-specific security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Staging-Environment "true" always;

    # Logging with more detail for debugging
    access_log /var/log/nginx/saraivavision-staging-access.log;
    error_log /var/log/nginx/saraivavision-staging-error.log info;

    # WordPress proxy
    location ~ ^/(wp-admin|wp-login\.php|wp-json) {
        limit_req zone=staging_login burst=10 nodelay;

        proxy_pass http://wordpress_staging;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # No caching for staging admin
        add_header Cache-Control "no-cache";
        add_header X-Environment "staging";
    }

    # API endpoints
    location /api/ {
        limit_req zone=staging_api burst=15 nodelay;

        # Permissive CORS for staging
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";

        if ($request_method = OPTIONS) {
            return 204;
        }

        try_files $uri $uri/ @staging_api_fallback;
    }

    # Static assets with medium caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1d;
        add_header Cache-Control "public";
        add_header X-Environment "staging";

        try_files $uri =404;
    }

    # Service Worker
    location = /sw.js {
        add_header Cache-Control "no-cache";
        add_header X-Environment "staging";
        try_files $uri =404;
    }

    # Health check with staging info
    location = /health {
        access_log off;
        return 200 '{"status":"ok","env":"staging","version":"$time_iso8601","server":"nginx"}';
        add_header Content-Type "application/json";
    }

    # Debug endpoint (staging only) - REMOVED for security
    # Exposing server headers and internal information is a security risk
    # location = /debug {
    #     access_log off;
    #     return 200 '{"status":"debug endpoint disabled for security"}';
    #     add_header Content-Type "application/json";
    # }

    # Main SPA application
    location / {
        try_files $uri $uri/ /index.html;

        # Short caching for staging HTML
        add_header Cache-Control "no-cache, must-revalidate";
        add_header X-Environment "staging";
    }

    # Staging API fallback
    location @staging_api_fallback {
        return 404 '{"error":"Staging API endpoint not found","path":"$uri","env":"staging"}';
        add_header Content-Type "application/json";
    }

    # Error pages
    error_page 404 /staging-404.html;
    error_page 500 502 503 504 /staging-50x.html;

    location = /staging-404.html {
        return 404 '{"error":"Not Found","message":"Staging environment - resource not found","path":"$uri"}';
        add_header Content-Type "application/json";
    }

    location = /staging-50x.html {
        return 500 '{"error":"Server Error","message":"Staging environment server error"}';
        add_header Content-Type "application/json";
    }
}
