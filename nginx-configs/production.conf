# Saraiva Vision - Fixed Production Nginx Configuration
# Simplified configuration for current deployment

# Rate limiting zones - adjusted for Cloudflare compatibility
# Reduced rates since Cloudflare WAF provides additional protection
limit_req_zone $binary_remote_addr zone=api:10m rate=60r/m;
limit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=contact:10m rate=20r/m;

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name saraivavision.com.br www.saraivavision.com.br;

    # ACME challenge for SSL certificate renewal
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
        default_type text/plain;
    }

    # Redirect all HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name saraivavision.com.br www.saraivavision.com.br;
    root /var/www/saraivavision/current;
    index index.html;

    # SSL Configuration - adjusted for Cloudflare
    # Cloudflare handles SSL termination, so we use self-signed or Let's Encrypt
    ssl_certificate /etc/letsencrypt/live/saraivavision.com.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/saraivavision.com.br/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/saraivavision.com.br/chain.pem;

    # SSL Security settings - compatible with Cloudflare
    # Cloudflare supports TLS 1.2+, so we can be more restrictive
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # OCSP Stapling - works with Cloudflare
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Security Headers - adjusted for Cloudflare compatibility
    # Some headers are handled by Cloudflare, avoiding duplication
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;

    # Cloudflare handles some security headers, so we focus on application-specific ones
    # COEP/COOP headers for medical website security compliance
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Resource-Policy "same-origin" always;

    # Content Security Policy - adjusted for Cloudflare compatibility
    # Allow Cloudflare services and maintain medical website security
    add_header Content-Security-Policy "
        default-src 'self';
        script-src 'self'
                   'unsafe-inline'
                   https://www.googletagmanager.com
                   https://www.google-analytics.com
                   https://tagmanager.google.com
                   https://connect.facebook.net
                   https://www.facebook.com
                   https://js.hsforms.net
                   https://forms.hsforms.com
                   https://ajax.cloudflare.com;
        style-src 'self'
                  'unsafe-inline'
                  https://fonts.googleapis.com
                  https://tagmanager.google.com;
        font-src 'self'
                 https://fonts.gstatic.com
                 data:;
        img-src 'self'
                https:
                data:
                blob:
                https://www.google-analytics.com
                https://www.googletagmanager.com
                https://www.facebook.com
                https://connect.facebook.net;
        connect-src 'self'
                    https://api.resend.com
                    https://www.google-analytics.com
                    https://analytics.google.com
                    https://www.googletagmanager.com
                    https://region1.google-analytics.com
                    https://www.facebook.com
                    https://connect.facebook.net
                    wss://connect.facebook.net
                    https://forms.hsforms.com
                    https://api.hsforms.com
                    https://ajax.cloudflare.com;
        frame-src 'self'
                  https://www.google.com
                  https://recaptcha.google.com
                  https://www.facebook.com
                  https://connect.facebook.net
                  https://forms.hsforms.com;
        object-src 'none';
        base-uri 'self';
        form-action 'self'
                    https://forms.hsforms.com;
        frame-ancestors 'none';
        upgrade-insecure-requests;
    " always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Static assets with long-term caching and proper headers
    location ~* \.(js|css|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        add_header X-Content-Source "static";
        # Let Cloudflare handle caching for static assets
        add_header CF-Cache-Status "bypass" always;
        access_log off;
    }

    # Special handling for PNG files including logo.png
    location ~* \.png$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        add_header X-Content-Source "static";
        # Let Cloudflare handle caching for images
        add_header CF-Cache-Status "bypass" always;
        access_log off;
    }

    # Ensure logo.png is always available with fallback
    location = /logo.png {
        try_files $uri =404;
        add_header Cache-Control "public, max-age=31536000";
        add_header X-Content-Source "static";
        # Let Cloudflare handle caching
        add_header CF-Cache-Status "bypass" always;
    }

    # Special handling for PWA files
    location ~* \.(webmanifest|xml|txt)$ {
        add_header Cache-Control "public, max-age=86400";
        add_header X-Content-Source "static";
        # Let Cloudflare handle caching
        add_header CF-Cache-Status "bypass" always;
    }

    # SPA routing - serve index.html for all routes
    location / {
        try_files $uri $uri/ /index.html;

        # Cloudflare compatible cache control for HTML files
        # Let Cloudflare handle caching, set no-cache only for dynamic content
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        # Tell Cloudflare not to cache HTML pages
        add_header CF-Cache-Status "bypass" always;
    }

    # API endpoints with rate limiting
    location /api/ {
        # Use direct container communication or fallback to localhost
        proxy_pass http://localhost:3001/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;

        # Cloudflare compatible proxy headers
        # Use CF-Connecting-IP for real client IP when available
        proxy_set_header X-Real-IP $http_cf_connecting_ip;
        proxy_set_header X-Forwarded-For $http_cf_connecting_ip;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header CF-IPCountry $http_cf_ipcountry;
        proxy_set_header CF-RAY $http_cf_ray;

        proxy_cache_bypass $http_upgrade;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Cloudflare compatible headers - let Cloudflare handle caching
        add_header Cache-Control "no-cache, no-store, must-revalidate, private";
        add_header CF-Cache-Status "bypass" always;

        # Rate limiting for sensitive endpoints
        limit_req zone=api burst=10 nodelay;
    }

    # WordPress proxy
    location /wp-admin/ {
        proxy_pass http://localhost:8083/wp-admin/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;

        # Cloudflare compatible proxy headers for WordPress admin
        proxy_set_header X-Real-IP $http_cf_connecting_ip;
        proxy_set_header X-Forwarded-For $http_cf_connecting_ip;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header CF-IPCountry $http_cf_ipcountry;
        proxy_set_header CF-RAY $http_cf_ray;

        # Cloudflare compatible - ensure admin is never cached
        add_header Cache-Control "no-cache, no-store, must-revalidate, private";
        add_header CF-Cache-Status "bypass" always;
        add_header Pragma "no-cache";
        add_header Expires "0";

        # Reduced rate limiting - Cloudflare provides additional protection
        limit_req zone=login burst=5 nodelay;
    }

    location /wp-json/ {
        proxy_pass http://localhost:8083/wp-json/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;

        # Cloudflare compatible proxy headers for WordPress API
        proxy_set_header X-Real-IP $http_cf_connecting_ip;
        proxy_set_header X-Forwarded-For $http_cf_connecting_ip;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header CF-IPCountry $http_cf_ipcountry;
        proxy_set_header CF-RAY $http_cf_ray;

        # Cloudflare compatible - API can be cached by Cloudflare
        add_header Cache-Control "public, max-age=300";
        add_header CF-Cache-Status "dynamic" always;

        # CORS headers removed - handled by WordPress CORS plugin to prevent duplication
    }

    # Security: deny access to sensitive files
    location ~* \.(env|log|htaccess|htpasswd|git|svn|DS_Store)$ {
        deny all;
        return 404;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"healthy","service":"nginx","timestamp":"healthy","version":"1.0.0","environment":"production"}';
        add_header Content-Type application/json;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        # Health checks should not be cached by Cloudflare
        add_header CF-Cache-Status "bypass" always;
    }

    # Error pages - configured for Cloudflare compatibility
    # Ensure error pages are not cached by Cloudflare
    error_page 404 /index.html;
    error_page 500 502 503 504 /index.html;

    location = /50x.html {
        root /usr/share/nginx/html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header CF-Cache-Status "bypass" always;
    }
}
