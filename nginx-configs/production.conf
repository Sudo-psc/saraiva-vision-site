# Saraiva Vision - Production Nginx Configuration
# Docker containerized architecture with SSL termination
# Version: 2025-09-18

# Upstream definitions for Docker containers
upstream frontend {
    server frontend:3002;
    keepalive 32;
}

upstream api {
    server api:3001;
    keepalive 32;
}

upstream wordpress {
    server wordpress:9000;
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=contact:10m rate=10r/m;

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name saraivavision.com.br www.saraivavision.com.br;
    
    # ACME challenge for SSL certificate renewal
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
        default_type text/plain;
    }
    
    # Redirect all HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name saraivavision.com.br www.saraivavision.com.br;
    
    # Basic server settings
    server_tokens off;
    client_max_body_size 10m;
    
    # Include MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Document root (points to current release)
    root /var/www/saraivavision/current;
    index index.html;
    
    # SSL Configuration
    include /etc/nginx/nginx-configs/includes/ssl.conf;
    
    # Security headers
    include /etc/nginx/nginx-configs/includes/security-headers.conf;
    
    # Gzip compression
    include /etc/nginx/nginx-configs/includes/gzip.conf;
    
    # Content Security Policy
    include /etc/nginx/nginx-configs/includes/csp.conf;
    
    # Logging
    access_log /var/log/nginx/saraivavision-access.log;
    error_log /var/log/nginx/saraivavision-error.log warn;
    
    # WordPress Admin & Login (if WordPress is running)
    location ~ ^/(wp-admin|wp-login\.php|wp-json) {
        limit_req zone=login burst=5 nodelay;
        include /etc/nginx/nginx-configs/includes/wordpress-proxy.conf;
    }
    
    # WordPress uploads and wp-content
    location ~ ^/wp-content/ {
        proxy_pass http://wordpress_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Source "wordpress";
    }
    
    # API endpoints with rate limiting
    location /api/ {
        limit_req zone=api burst=10 nodelay;
        
        # Handle contact form submissions
        if ($uri ~ "^/api/contact") {
            limit_req zone=contact burst=3 nodelay;
        }
        
        # API files location
        try_files $uri $uri/ @api_fallback;
        
        # CORS for API endpoints
        add_header Access-Control-Allow-Origin "https://saraivavision.com.br";
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        
        # Handle preflight OPTIONS requests
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "https://saraivavision.com.br";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            return 204;
        }
    }
    
    # Static assets with long-term caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Source "static";
        
        # Gzip for text-based assets
        gzip_static on;
        
        # Try file, then fallback
        try_files $uri =404;
    }
    
    # Images with optimization headers
    location /images/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Source "images";
        
        # WebP fallback
        location ~ \.(png|jpg|jpeg)$ {
            add_header Vary Accept;
            try_files $uri.webp $uri =404;
        }
    }
    
    # Service Worker (no cache)
    location = /sw.js {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        expires 0;
        try_files $uri =404;
    }
    
    # Web App Manifest
    location = /site.webmanifest {
        add_header Content-Type "application/manifest+json";
        expires 1y;
        try_files $uri =404;
    }
    
    # Robots.txt
    location = /robots.txt {
        add_header Content-Type "text/plain";
        expires 1d;
        try_files $uri =404;
    }
    
    # Sitemap
    location = /sitemap.xml {
        add_header Content-Type "application/xml";
        expires 1d;
        try_files $uri =404;
    }
    
    # Favicon handling
    location ~* ^/favicon.*\.(ico|png)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }
    
    # Security - deny access to sensitive files
    location ~ /\.(env|git|htaccess|htpasswd) {
        deny all;
        return 404;
    }
    
    # Security - deny access to package files
    location ~ /(package\.json|package-lock\.json|yarn\.lock|\.npmrc) {
        deny all;
        return 404;
    }
    
    # Health check endpoint
    location = /health {
        access_log off;
        return 200 '{"status":"ok","service":"saraivavision","timestamp":"$time_iso8601"}';
        add_header Content-Type "application/json";
    }
    
    # Main SPA application (React Router)
    location / {
        # Try file first, then index.html for SPA routing
        try_files $uri $uri/ /index.html;
        
        # Cache control for HTML
        add_header Cache-Control "no-cache, must-revalidate";
        add_header X-Content-Source "spa";
        
        # Security headers for HTML pages
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
    }
    
    # API fallback (for serverless functions)
    location @api_fallback {
        # This could proxy to serverless functions or return 404
        return 404;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /var/www/saraivavision/current;
        internal;
    }
    
    location = /50x.html {
        root /var/www/saraivavision/current;
        internal;
    }
}

# Redirect www to non-www (if preferred)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.saraivavision.com.br;
    
    # SSL Configuration
    include /etc/nginx/nginx-configs/includes/ssl.conf;
    
    return 301 https://saraivavision.com.br$request_uri;
}