/**
 * Healthcare System Verification Script for Cl√≠nica Saraiva Vision
 * Run this in the browser console (F12 > Console) to verify all fixes are working
 * 
 * Usage: Copy and paste this entire script into the browser console and press Enter
 */

(function() {
  'use strict';
  
  console.log('üè• INICIANDO VERIFICA√á√ÉO DO SISTEMA CL√çNICA SARAIVA VISION');
  console.log('=====================================\n');
  
  const results = {
    sessionManagement: null,
    tokenManagement: null,
    adBlockerCompatibility: null,
    criticalServices: null,
    networkConnectivity: null,
    performanceMetrics: null,
    overallHealth: 'unknown'
  };
  
  // Test 1: Session Management
  async function testSessionManagement() {
    console.log('üîê Testando Gest√£o de Sess√µes...');
    
    try {
      // Check if healthcare session manager is available
      if (typeof window.healthcareSessionManager !== 'undefined') {
        console.log('‚úÖ Healthcare Session Manager carregado');
        results.sessionManagement = 'working';
      } else {
        // Check basic session storage functionality
        sessionStorage.setItem('test_session', 'test_value');
        const testValue = sessionStorage.getItem('test_session');
        sessionStorage.removeItem('test_session');
        
        if (testValue === 'test_value') {
          console.log('‚úÖ Session Storage funcionando');
          results.sessionManagement = 'basic';
        } else {
          console.error('‚ùå Session Storage n√£o funcionando');
          results.sessionManagement = 'failed';
        }
      }
    } catch (error) {
      console.error('‚ùå Erro na gest√£o de sess√µes:', error);
      results.sessionManagement = 'error';
    }
    
    console.log('');
  }
  
  // Test 2: Token Management
  async function testTokenManagement() {
    console.log('üîë Testando Gest√£o de Tokens...');
    
    try {
      // Test Google Analytics connectivity
      const gaTest = new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => resolve(true);
        img.onerror = () => reject('GA n√£o acess√≠vel');
        img.src = 'https://www.google-analytics.com/collect?v=1&t=pageview&tid=test&cid=' + Date.now();
        setTimeout(() => reject('Timeout GA'), 3000);
      });
      
      try {
        await gaTest;
        console.log('‚úÖ Google Analytics acess√≠vel');
        results.tokenManagement = 'working';
      } catch (error) {
        console.warn('‚ö†Ô∏è Google Analytics pode estar bloqueado:', error);
        results.tokenManagement = 'limited';
      }
      
      // Test if gtag is available
      if (typeof window.gtag === 'function') {
        console.log('‚úÖ Google Analytics gtag carregado');
      } else {
        console.warn('‚ö†Ô∏è Google Analytics gtag n√£o encontrado');
      }
      
    } catch (error) {
      console.error('‚ùå Erro na gest√£o de tokens:', error);
      results.tokenManagement = 'error';
    }
    
    console.log('');
  }
  
  // Test 3: Ad Blocker Detection
  async function testAdBlockerCompatibility() {
    console.log('üõ°Ô∏è Testando Compatibilidade com Ad Blockers...');
    
    try {
      // Create test element that ad blockers typically block
      const testDiv = document.createElement('div');
      testDiv.className = 'adsbox';
      testDiv.style.cssText = 'position:absolute;left:-999px;width:1px;height:1px;';
      testDiv.innerHTML = '&nbsp;';
      
      document.body.appendChild(testDiv);
      
      setTimeout(() => {
        const isBlocked = testDiv.offsetHeight === 0;
        
        if (isBlocked) {
          console.warn('‚ö†Ô∏è Ad Blocker detectado - funcionalidades de fallback ativas');
          results.adBlockerCompatibility = 'detected_with_fallback';
        } else {
          console.log('‚úÖ Nenhum Ad Blocker detectado');
          results.adBlockerCompatibility = 'no_blocker';
        }
        
        document.body.removeChild(testDiv);
      }, 100);
      
    } catch (error) {
      console.error('‚ùå Erro na detec√ß√£o de ad blocker:', error);
      results.adBlockerCompatibility = 'error';
    }
    
    console.log('');
  }
  
  // Test 4: Critical Services
  async function testCriticalServices() {
    console.log('üè• Testando Servi√ßos Cr√≠ticos da Cl√≠nica...');
    
    const criticalEndpoints = [
      { name: 'Homepage', url: '/', critical: true },
      { name: 'API Health', url: '/api/health', critical: false },
      { name: 'Imagens Acessibilidade', url: '/img/Acessib_icon.png', critical: true },
      { name: 'Imagens ISO', url: '/img/iso9001-icon.png', critical: true }
    ];
    
    const testResults = [];
    
    for (const endpoint of criticalEndpoints) {
      try {
        const response = await fetch(endpoint.url, { method: 'HEAD' });
        const status = response.ok ? 'working' : `error_${response.status}`;
        
        testResults.push({ ...endpoint, status, responseTime: 0 });
        
        if (status === 'working') {
          console.log(`‚úÖ ${endpoint.name}: Funcionando`);
        } else {
          console.error(`‚ùå ${endpoint.name}: Erro ${response.status}`);
        }
        
      } catch (error) {
        testResults.push({ ...endpoint, status: 'failed', responseTime: 0 });
        console.error(`‚ùå ${endpoint.name}: Falhou -`, error.message);
      }
    }
    
    const criticalFailures = testResults.filter(r => r.critical && r.status !== 'working');
    
    if (criticalFailures.length === 0) {
      console.log('‚úÖ Todos os servi√ßos cr√≠ticos funcionando');
      results.criticalServices = 'all_working';
    } else {
      console.error(`‚ùå ${criticalFailures.length} servi√ßos cr√≠ticos com problemas`);
      results.criticalServices = 'has_failures';
    }
    
    console.log('');
  }
  
  // Test 5: Network Connectivity
  async function testNetworkConnectivity() {
    console.log('üåê Testando Conectividade de Rede...');
    
    try {
      const startTime = performance.now();
      const response = await fetch(window.location.origin + '/?health_check=1', {
        method: 'HEAD',
        cache: 'no-cache'
      });
      const responseTime = performance.now() - startTime;
      
      if (response.ok && responseTime < 2000) {
        console.log(`‚úÖ Conectividade excelente (${Math.round(responseTime)}ms)`);
        results.networkConnectivity = 'excellent';
      } else if (response.ok && responseTime < 5000) {
        console.log(`‚ö†Ô∏è Conectividade adequada (${Math.round(responseTime)}ms)`);
        results.networkConnectivity = 'adequate';
      } else {
        console.warn(`‚ö†Ô∏è Conectividade lenta (${Math.round(responseTime)}ms)`);
        results.networkConnectivity = 'slow';
      }
      
    } catch (error) {
      console.error('‚ùå Erro de conectividade:', error);
      results.networkConnectivity = 'failed';
    }
    
    console.log('');
  }
  
  // Test 6: Performance Metrics
  async function testPerformanceMetrics() {
    console.log('‚ö° Coletando M√©tricas de Performance...');
    
    try {
      if (window.performance && window.performance.navigation) {
        const navigation = performance.getEntriesByType('navigation')[0];
        
        if (navigation) {
          const loadTime = navigation.loadEventEnd - navigation.loadEventStart;
          const domTime = navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart;
          
          console.log(`üìä Tempo de carregamento: ${Math.round(loadTime)}ms`);
          console.log(`üìä Tempo DOM ready: ${Math.round(domTime)}ms`);
          
          if (loadTime < 3000) {
            console.log('‚úÖ Performance excelente');
            results.performanceMetrics = 'excellent';
          } else if (loadTime < 5000) {
            console.log('‚ö†Ô∏è Performance adequada');
            results.performanceMetrics = 'adequate';
          } else {
            console.warn('‚ö†Ô∏è Performance pode ser melhorada');
            results.performanceMetrics = 'needs_improvement';
          }
        }
      }
      
      // Check memory usage if available
      if (performance.memory) {
        const usedMB = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);
        console.log(`üíæ Uso de mem√≥ria: ${usedMB}MB`);
        
        if (usedMB > 100) {
          console.warn('‚ö†Ô∏è Alto uso de mem√≥ria detectado');
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erro coletando m√©tricas:', error);
      results.performanceMetrics = 'error';
    }
    
    console.log('');
  }
  
  // Overall Health Assessment
  function assessOverallHealth() {
    console.log('üìä AVALIA√á√ÉO GERAL DO SISTEMA');
    console.log('=====================================');
    
    const criticalIssues = [];
    const warnings = [];
    
    // Assess each component
    if (results.sessionManagement === 'failed' || results.sessionManagement === 'error') {
      criticalIssues.push('Gest√£o de Sess√µes');
    }
    
    if (results.criticalServices === 'has_failures') {
      criticalIssues.push('Servi√ßos Cr√≠ticos');
    }
    
    if (results.networkConnectivity === 'failed') {
      criticalIssues.push('Conectividade');
    }
    
    if (results.tokenManagement === 'limited') {
      warnings.push('Analytics podem estar limitados');
    }
    
    if (results.adBlockerCompatibility === 'detected_with_fallback') {
      warnings.push('Ad Blocker detectado (fallbacks ativos)');
    }
    
    if (results.performanceMetrics === 'needs_improvement') {
      warnings.push('Performance pode ser otimizada');
    }
    
    // Determine overall health
    if (criticalIssues.length === 0) {
      if (warnings.length === 0) {
        console.log('‚úÖ SISTEMA SAUD√ÅVEL - Todos os componentes funcionando perfeitamente');
        results.overallHealth = 'healthy';
      } else {
        console.log('‚ö†Ô∏è SISTEMA FUNCIONAL - Alguns alertas menores detectados');
        results.overallHealth = 'functional_with_warnings';
      }
    } else {
      console.error('‚ùå SISTEMA COM PROBLEMAS - Aten√ß√£o necess√°ria');
      results.overallHealth = 'needs_attention';
    }
    
    console.log('\nüìã RESUMO:');
    console.log(`üîê Sess√µes: ${results.sessionManagement}`);
    console.log(`üîë Tokens: ${results.tokenManagement}`);
    console.log(`üõ°Ô∏è Ad Blocker: ${results.adBlockerCompatibility}`);
    console.log(`üè• Servi√ßos: ${results.criticalServices}`);
    console.log(`üåê Conectividade: ${results.networkConnectivity}`);
    console.log(`‚ö° Performance: ${results.performanceMetrics}`);
    
    if (criticalIssues.length > 0) {
      console.log('\nüö® PROBLEMAS CR√çTICOS:');
      criticalIssues.forEach(issue => console.log(`   ‚Ä¢ ${issue}`));
    }
    
    if (warnings.length > 0) {
      console.log('\n‚ö†Ô∏è ALERTAS:');
      warnings.forEach(warning => console.log(`   ‚Ä¢ ${warning}`));
    }
    
    console.log('\nüîß RECOMENDA√á√ïES:');
    
    if (results.adBlockerCompatibility === 'detected_with_fallback') {
      console.log('   ‚Ä¢ Considere configurar whitelist para dom√≠nios da cl√≠nica');
      console.log('   ‚Ä¢ Verifique se analytics s√£o necess√°rios para opera√ß√£o');
    }
    
    if (results.performanceMetrics === 'needs_improvement') {
      console.log('   ‚Ä¢ Verifique conex√£o de internet');
      console.log('   ‚Ä¢ Considere limpar cache do navegador');
    }
    
    if (criticalIssues.includes('Servi√ßos Cr√≠ticos')) {
      console.log('   ‚Ä¢ Verifique conectividade do servidor');
      console.log('   ‚Ä¢ Contate suporte t√©cnico se problemas persistirem');
    }
    
    console.log('\n=====================================');
    console.log('VERIFICA√á√ÉO CONCLU√çDA ‚ú®');
    
    return results;
  }
  
  // Run all tests
  async function runAllTests() {
    await testSessionManagement();
    await testTokenManagement();
    await testAdBlockerCompatibility();
    await testCriticalServices();
    await testNetworkConnectivity();
    await testPerformanceMetrics();
    
    // Wait a moment for ad blocker test to complete
    setTimeout(() => {
      assessOverallHealth();
    }, 500);
  }
  
  // Start verification
  runAllTests();
  
})();