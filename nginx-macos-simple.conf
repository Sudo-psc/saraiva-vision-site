# Configuração Nginx simplificada para macOS - Saraiva Vision
# Frontend React + Mock WordPress Backend

# Rate limiting
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

# Frontend React Application
server {
    listen 8082;
    listen [::]:8082;
    server_name localhost saraiva-vision.local;

    root DEPLOY_PATH_PLACEHOLDER;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval' *.google.com *.googletagmanager.com *.gstatic.com;
        style-src 'self' 'unsafe-inline' fonts.googleapis.com;
        font-src 'self' fonts.gstatic.com;
        img-src 'self' data: blob: *.google.com *.googleusercontent.com *.gstatic.com;
        connect-src 'self' *.google.com *.googleapis.com localhost:*;
        frame-src 'self' *.google.com;
        object-src 'none';
        base-uri 'self';
        form-action 'self';
    " always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/manifest+json
        application/wasm;

    # Static assets with aggressive caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        try_files $uri =404;
    }

    # JSON files (translations)
    location ~* \.json$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate, max-age=3600";
        try_files $uri =404;
    }

    # Health check endpoint
    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Web Vitals endpoint fallback
    location = /web-vitals {
        access_log off;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS, POST" always;
        add_header Access-Control-Allow-Headers "Content-Type" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Content-Type application/json always;

        if ($request_method = 'OPTIONS') {
            return 204;
        }
        if ($request_method = 'POST') {
            return 204;
        }
        return 200 '{"cls":0,"fid":0,"lcp":0}';
    }

    # WordPress API proxy to mock server
    location /wp-json/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://localhost:8083;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Cache-Control "public, max-age=300";
    }

    # WordPress admin proxy to mock server
    location /wp-admin/ {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://localhost:8083;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # React app routing (SPA)
    location / {
        try_files $uri $uri/ /index.html;

        # Add security headers for HTML
        location ~ \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
    }

    # Legacy redirects to standardized services path
    location ~ ^/servico/(.+)$ {
        return 301 /servicos/$1$is_args$args;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /index.html;
}