# Docker Compose configuration for Saraiva Vision
# Complete containerized medical website stack
version: '3.8'

# Define custom networks for service isolation
networks:
  frontend-network:
    driver: bridge
    name: saraiva-frontend
  backend-network:
    driver: bridge
    name: saraiva-backend
  database-network:
    driver: bridge
    name: saraiva-database

# Shared volumes for persistent data
volumes:
  wordpress-data:
    name: saraiva-wordpress-data
    driver: local
  ssl-certificates:
    name: saraiva-ssl-certs
    driver: local
  nginx-cache:
    name: saraiva-nginx-cache
    driver: local

services:
  # Frontend React Application Container
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: saraiva-frontend
    hostname: frontend
    restart: unless-stopped
    ports:
      - "3002:3002"
    networks:
      - frontend-network
    environment:
      - NODE_ENV=production
      - DOCKER_CONTAINER=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3002"
      - "com.saraivavision.service=frontend"
      - "com.saraivavision.environment=production"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Backend Container
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: saraiva-api
    hostname: api
    restart: unless-stopped
    ports:
      - "3001:3001"
    networks:
      - backend-network
      - database-network
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - DOCKER_CONTAINER=true
      # Load environment variables from .env.docker
      - VITE_GOOGLE_MAPS_API_KEY=${VITE_GOOGLE_MAPS_API_KEY}
      - VITE_GOOGLE_PLACE_ID=${VITE_GOOGLE_PLACE_ID}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - GTM_ID=${GTM_ID}
    env_file:
      - .env.docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - wordpress
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api/`)"
      - "traefik.http.services.api.loadbalancer.server.port=3001"
      - "com.saraivavision.service=api"
      - "com.saraivavision.environment=production"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # WordPress CMS Container
  wordpress:
    build:
      context: .
      dockerfile: Dockerfile.wordpress
      target: base
    container_name: saraiva-wordpress
    hostname: wordpress
    restart: unless-stopped
    ports:
      - "9000:9000"
    networks:
      - backend-network
      - database-network
    volumes:
      - wordpress-data:/var/www/html/wp-content
      - ./wordpress-local/wp-config.php:/var/www/html/wp-config.php:ro
      - ./wordpress-local/.htaccess:/var/www/html/.htaccess:ro
    environment:
      - WORDPRESS_DB_HOST=
      - WORDPRESS_DB_NAME=wordpress
      - WORDPRESS_DB_USER=
      - WORDPRESS_DB_PASSWORD=
      - WORDPRESS_TABLE_PREFIX=wp_
      - WORDPRESS_DEBUG=false
      - WORDPRESS_CONFIG_EXTRA=define('USE_MYSQL', false); define('DB_FILE', 'database.sqlite'); define('DB_DIR', '/var/www/html/wp-content/');
      - DOCKER_CONTAINER=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wordpress.rule=PathPrefix(`/wp-admin/`, `/wp-json/`, `/wp-content/`, `/wp-includes/`)"
      - "traefik.http.services.wordpress.loadbalancer.server.port=9000"
      - "com.saraivavision.service=wordpress"
      - "com.saraivavision.environment=production"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy Container
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
      target: production
    container_name: saraiva-nginx
    hostname: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend-network
      - backend-network
    volumes:
      - ssl-certificates:/etc/ssl:ro
      - nginx-cache:/var/cache/nginx
      - ./nginx-configs:/etc/nginx/conf.d:ro
    environment:
      - NGINX_FRONTEND_HOST=frontend
      - NGINX_API_HOST=api
      - NGINX_WORDPRESS_HOST=wordpress
      - DOCKER_CONTAINER=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
      wordpress:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`localhost`)"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
      - "com.saraivavision.service=nginx"
      - "com.saraivavision.environment=production"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Database backup service
  backup:
    image: alpine:3.18
    container_name: saraiva-backup
    hostname: backup
    restart: "no"
    networks:
      - database-network
    volumes:
      - wordpress-data:/backup/wordpress:ro
      - ./backups:/backup/output
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - RETENTION_DAYS=7
    command: >
      sh -c "
        echo 'Setting up backup service...'
        mkdir -p /backup/output
        while true; do
          echo 'Starting backup: $$(date)'
          tar -czf /backup/output/wordpress-$$(date +%Y%m%d_%H%M%S).tar.gz -C /backup/wordpress .
          find /backup/output -name 'wordpress-*.tar.gz' -mtime +$$RETENTION_DAYS -delete
          echo 'Backup completed: $$(date)'
          sleep 86400  # Sleep for 24 hours
        done
      "
    labels:
      - "com.saraivavision.service=backup"
      - "com.saraivavision.environment=production"
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

# Health check and monitoring
x-health-check: &health-check
  interval: 30s
  timeout: 10s
  retries: 3

# Common environment variables
x-common-env: &common-env
  DOCKER_CONTAINER: "true"
  TZ: "America/Sao_Paulo"