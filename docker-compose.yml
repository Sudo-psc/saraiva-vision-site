services:
  # Nginx reverse proxy with access/error logging
  nginx:
    image: nginx:1.25-alpine
    container_name: saraiva-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./dist:/var/www/html:ro
      - ./infra/nginx/sites-available/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./infra/nginx/snippets:/etc/nginx/snippets:ro
      - nginx_logs:/var/log/nginx
      - ./logs/nginx:/var/log/nginx-host
    environment:
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "nginx"
    depends_on:
      - api
    networks:
      - saraiva_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js API server with JSON logging
  api:
    build:
      context: .
      dockerfile: infra/docker/api/Dockerfile
    container_name: saraiva-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - ENABLE_ACCESS_LOGS=true
    volumes:
      - api_logs:/app/logs
      - ./logs/api:/app/logs-host
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        tag: "api"
    networks:
      - saraiva_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation service (optional)
  log-collector:
    image: fluent/fluent-bit:2.2
    container_name: saraiva-logs
    restart: unless-stopped
    volumes:
      - ./infra/docker/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - nginx_logs:/var/log/nginx:ro
      - api_logs:/var/log/api:ro
      - ./logs:/var/log/host
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    networks:
      - saraiva_network
    profiles:
      - monitoring

volumes:
  nginx_logs:
    driver: local
  api_logs:
    driver: local

networks:
  saraiva_network:
    driver: bridge
    name: saraiva_network

# Development overrides
# Use: docker compose -f docker-compose.yml -f docker-compose.dev.yml up