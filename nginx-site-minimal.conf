## Minimal Nginx site config for SPA + /ads JSON + /api CORS
## Placement (on server):
##   /etc/nginx/sites-available/saraivavision
## Enable with symlink:
##   sudo ln -s /etc/nginx/sites-available/saraivavision /etc/nginx/sites-enabled/saraivavision
## Validate & reload:
##   sudo nginx -t && sudo systemctl reload nginx

# CORS whitelist for API: only allow known origins
map $http_origin $cors_origin {
    default "";
    ~^https?://(www\.)?saraivavision\.com\.br$ $http_origin;
    ~^https?://saraivavision\.vercel\.app$ $http_origin;
    ~^http://localhost(:[0-9]{2,5})?$ $http_origin;
}

server {
    listen 80;
    listen [::]:80;
    server_name saraivavision.com.br www.saraivavision.com.br;

    # ACME challenge for Let's Encrypt (webroot method)
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
        default_type text/plain;
    }

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name saraivavision.com.br www.saraivavision.com.br;
    server_tokens off;

    # TLS (replace paths if needed)
    ssl_certificate /etc/letsencrypt/live/saraivavision.com.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/saraivavision.com.br/privkey.pem;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_prefer_server_ciphers off;

    # Root / SPA
    root /var/www/saraivavision/current;
    index index.html;

    # Health check
    location = /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }

    # HTML: no-cache to allow instant deploys
    location ~* \.html$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        try_files $uri $uri/ /index.html;
    }

    # Exact /ads endpoint -> benign JSON (prevents 400s / SPA HTML)
    location = /ads {
        default_type application/json;
        access_log off;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        return 200 '{"status":"ok","message":"ads blocked or disabled"}';
    }

    # Static assets (optional minimal caching)
    location ~* \.(?:css|png|jpg|jpeg|gif|ico|svg|woff2?|ttf|eot|otf|mjs|js)$ {
        expires 7d;
        add_header Cache-Control "public";
        try_files $uri =404;
    }

    # SPA fallback
    location / {
        try_files $uri $uri/ /index.html;
    }

    # API proxy with CORS
    location /api/ {
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Vary' 'Origin' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

        # Preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin;
            add_header 'Vary' 'Origin';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
}
