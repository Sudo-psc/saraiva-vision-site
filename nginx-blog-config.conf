# ============================================================================
# Nginx Configuration Snippet for Static Blog
# Saraiva Vision - Blog Route Configuration
# ============================================================================
#
# This configuration serves the static blog integrated into the React SPA.
# The blog is part of the main React application, not a separate CMS.
#
# Implementation:
#   - Blog data is stored statically in src/data/blogPosts.js
#   - React Router handles /blog and /blog/* routes
#   - All blog routes should fallback to index.html for client-side routing
#   - No external WordPress or CMS integration required
#
# INTEGRATION: Add this configuration to the main server block in
#              /etc/nginx/sites-available/saraivavision
#
# ============================================================================

# Blog Routes - Static SPA Integration
# ============================================================================
# The /blog route is part of the React SPA and requires the same
# SPA fallback handling as other routes. No special configuration needed
# beyond the existing SPA fallback in the main location / block.

# Example integration into existing Nginx config:
#
# location / {
#     limit_req zone=main_limit burst=20 nodelay;
#
#     # SPA fallback handles all routes including /blog and /blog/*
#     try_files $uri $uri/ /index.html;
# }

# ============================================================================
# Static Assets Optimization for Blog Content
# ============================================================================
# Blog images, videos, and other media should be served with appropriate
# caching headers. These rules are already covered by existing asset rules.

# Images (blog content images)
location ~* \.(png|jpg|jpeg|gif|webp|avif|svg)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Vary "Accept-Encoding";
    access_log off;

    # Enable Gzip compression
    gzip_static on;

    # Try files with fallback
    try_files $uri =404;
}

# Videos and audio (blog multimedia content)
location ~* \.(mp4|webm|ogg|mp3|wav|flac)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Vary "Accept-Encoding";
    access_log off;

    # Try files with fallback
    try_files $uri =404;
}

# ============================================================================
# SEO and Meta Tags for Blog
# ============================================================================
# React application dynamically injects meta tags via react-helmet-async
# No special Nginx configuration required for SEO

# ============================================================================
# Blog-Specific Security Headers
# ============================================================================
# Blog content follows the same CSP rules as the main site
# Already configured in main server block security headers

# ============================================================================
# Performance Optimizations
# ============================================================================
# Blog routes benefit from existing SPA optimizations:
#   - Lazy loading of BlogPage and BlogPostPage components
#   - Code splitting for blog-related components
#   - Static data loading from blogPosts.js (no API calls)
#   - Optimized bundling via Vite configuration

# ============================================================================
# Monitoring and Logging
# ============================================================================
# Blog routes are logged with the main access log
# No separate log file needed for static blog content

# ============================================================================
# NOTES FOR DEPLOYMENT
# ============================================================================
# 1. The blog is fully integrated into the React SPA
# 2. No changes to existing Nginx configuration are required
# 3. The existing SPA fallback (try_files $uri $uri/ /index.html)
#    automatically handles all /blog routes
# 4. Blog data is stored in src/data/blogPosts.js and bundled with the app
# 5. No WordPress or external CMS integration for the blog
#
# If you want to verify blog routes work correctly:
#   - Test: curl -I https://saraivavision.com.br/blog
#   - Expected: 200 OK with HTML content
#   - Test: curl -I https://saraivavision.com.br/blog/some-post
#   - Expected: 200 OK (React Router handles the route)
#
# ============================================================================