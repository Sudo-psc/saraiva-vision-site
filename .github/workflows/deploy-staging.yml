name: Deploy - Staging

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-staging-${{ github.ref }}
  cancel-in-progress: false

jobs:
  staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
      STAGING_HOST: ${{ secrets.STAGING_HOST }}
    steps:
      - uses: actions/checkout@v4

      # -------- Frontend build --------
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: corepack enable
      - name: Install deps (frontend)
        working-directory: ./frontend
        run: pnpm i --frozen-lockfile
      - name: Build frontend
        working-directory: ./frontend
        run: pnpm build

      # -------- Deploy frontend (rsync) --------
      - name: Deploy frontend dist
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh && echo "$VPS_SSH_KEY" > ~/.ssh/key && chmod 600 ~/.ssh/key
          rsync -az --delete -e "ssh -i ~/.ssh/key -o StrictHostKeyChecking=no" ./frontend/dist/ $VPS_USER@$VPS_HOST:/var/www/site/current/frontend/

      # -------- Deploy WordPress code --------
      - name: Deploy WP code (themes & plugins)
        run: |
          mkdir -p ~/.ssh && echo "$VPS_SSH_KEY" > ~/.ssh/key && chmod 600 ~/.ssh/key
          rsync -az --delete -e "ssh -i ~/.ssh/key -o StrictHostKeyChecking=no" ./wp/wp-content/themes/ $VPS_USER@$VPS_HOST:/var/www/site/current/wp-content/themes/
          rsync -az --delete -e "ssh -i ~/.ssh/key -o StrictHostKeyChecking=no" ./wp/wp-content/plugins/ $VPS_USER@$VPS_HOST:/var/www/site/current/wp-content/plugins/

      # -------- Remote post-deploy (Composer, WP-CLI, Nginx, checks) --------
      - name: Remote post-deploy
        run: |
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
          set -euo pipefail
          cd /var/www/site/current
          # Composer
          if [ -f composer.json ]; then composer install --no-dev --prefer-dist --no-interaction || true; fi
          # WP-CLI migrations (dry-run then real)
          if command -v wp >/dev/null 2>&1; then
            wp --allow-root eval-file ./wp/migrations/sample_migration.php --dry-run || true
            wp --allow-root eval-file ./wp/migrations/sample_migration.php || true
            wp --allow-root core update-db || true
            wp --allow-root option update blog_public 1 || true
          fi
          # Nginx test & reload
          sudo nginx -t
          sudo systemctl reload nginx
          # Headers & TLS checks
          bash ./infra/scripts/check_headers.sh "$STAGING_HOST"
          bash ./infra/scripts/test_tls.sh "$STAGING_HOST"
          # k6 smoke
          bash ./infra/scripts/run_k6_smoke.sh "$STAGING_HOST"
          # ZAP baseline (DAST)
          bash ./infra/scripts/run_zap_baseline.sh "$STAGING_HOST"
          # Lighthouse CI (thresholds in frontend/lighthouserc.json)
          # TODO: configure LHCI server/token if needed
          EOF

