name: 🚀 Deploy on Release

on:
  repository_dispatch:
    types: [release-deployed, beta-release-deployed]
  release:
    types: [published]

permissions:
  contents: read

env:
  NODE_VERSION: '22.x'

jobs:
  deploy-production:
    name: 🏭 Auto Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.action == 'release-deployed' || (github.event_name == 'release' && !github.event.release.prerelease)
    environment:
      name: production
      url: https://saraivavision.com.br
    
    steps:
      - name: 📋 Deployment Info
        run: |
          echo "### 🚀 Auto-Deploy Triggered by Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "**Version:** ${{ github.event.client_payload.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Triggered by:** Release workflow" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Version:** ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Triggered by:** GitHub Release" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deploy will proceed automatically..." >> $GITHUB_STEP_SUMMARY

      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        env:
          NODE_ENV: production
          ENVIRONMENT: production
          VITE_ENVIRONMENT: production
          VITE_API_URL: https://saraivavision.com.br/api
          VITE_BASE_URL: https://saraivavision.com.br
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          VITE_GOOGLE_PLACES_API_KEY: ${{ secrets.GOOGLE_PLACES_API_KEY }}
          VITE_GOOGLE_PLACE_ID: ${{ secrets.GOOGLE_PLACE_ID }}
          VITE_SHOW_BETA_BANNER: false
          VITE_ENABLE_DEBUG: false
          VITE_ENABLE_ANALYTICS: true
          VITE_GA_TRACKING_ID: ${{ secrets.GA_TRACKING_ID }}
        run: |
          npm run build:vite
          
          # Add build info
          VERSION=$(node -p "require('./package.json').version")
          echo "PRODUCTION BUILD - v$VERSION" > dist/BUILD_INFO.txt
          echo "TIMESTAMP: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> dist/BUILD_INFO.txt
          echo "COMMIT: ${{ github.sha }}" >> dist/BUILD_INFO.txt
          echo "AUTO_DEPLOYED: true" >> dist/BUILD_INFO.txt

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: 📝 Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to production
        run: |
          DEPLOY_USER=root
          DEPLOY_HOST=${{ secrets.VPS_HOST }}
          DEPLOY_PATH=/var/www/saraivavision/current
          RELEASE_DIR="/var/www/saraivavision/releases/production/$(date +%Y%m%d_%H%M%S)"
          
          # Create release directory
          ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p /var/www/saraivavision/releases/production"
          
          # Upload build
          ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p $RELEASE_DIR"
          scp -r dist/* $DEPLOY_USER@$DEPLOY_HOST:$RELEASE_DIR/
          
          # Atomic deployment
          ssh $DEPLOY_USER@$DEPLOY_HOST "
            ln -sfn $RELEASE_DIR $DEPLOY_PATH
            systemctl reload nginx
            echo \"✅ Production deployed: $RELEASE_DIR\"
          "

      - name: 🏥 Health Check
        run: |
          sleep 10
          for i in {1..5}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://saraivavision.com.br || echo "000")
            if [ "$RESPONSE" = "200" ]; then
              echo "✅ Health check $i/5 passed"
            else
              echo "❌ Health check $i/5 failed (HTTP $RESPONSE)"
              exit 1
            fi
            sleep 3
          done

      - name: 📊 Summary
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "### ✅ Production Auto-Deploy Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://saraivavision.com.br" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

  deploy-beta:
    name: 🧪 Auto Deploy to Beta
    runs-on: ubuntu-latest
    if: github.event.action == 'beta-release-deployed'
    environment:
      name: beta
      url: https://beta.saraivavision.com.br
    
    steps:
      - name: 📋 Deployment Info
        run: |
          echo "### 🚀 Auto-Deploy Triggered by Beta Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Beta" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.client_payload.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for beta
        env:
          NODE_ENV: production
          ENVIRONMENT: beta
          VITE_ENVIRONMENT: beta
          VITE_API_URL: https://beta.saraivavision.com.br/api
          VITE_BASE_URL: https://beta.saraivavision.com.br
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.BETA_GOOGLE_MAPS_API_KEY }}
          VITE_GOOGLE_PLACES_API_KEY: ${{ secrets.BETA_GOOGLE_PLACES_API_KEY }}
          VITE_GOOGLE_PLACE_ID: ${{ secrets.GOOGLE_PLACE_ID }}
          VITE_SHOW_BETA_BANNER: true
          VITE_ENABLE_DEBUG: true
          VITE_ENABLE_ANALYTICS: false
        run: |
          npm run build:vite
          
          # Add build info
          VERSION=$(node -p "require('./package.json').version")
          echo "BETA BUILD - v$VERSION" > dist/BUILD_INFO.txt
          echo "TIMESTAMP: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> dist/BUILD_INFO.txt
          echo "COMMIT: ${{ github.sha }}" >> dist/BUILD_INFO.txt
          echo "AUTO_DEPLOYED: true" >> dist/BUILD_INFO.txt

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: 📝 Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to beta
        run: |
          DEPLOY_USER=root
          DEPLOY_HOST=${{ secrets.VPS_HOST }}
          DEPLOY_PATH=/var/www/saraivavision/beta
          RELEASE_DIR="/var/www/saraivavision/releases/beta/$(date +%Y%m%d_%H%M%S)"
          
          # Create release directory
          ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p /var/www/saraivavision/releases/beta"
          
          # Upload build
          ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p $RELEASE_DIR"
          scp -r dist/* $DEPLOY_USER@$DEPLOY_HOST:$RELEASE_DIR/
          
          # Atomic deployment
          ssh $DEPLOY_USER@$DEPLOY_HOST "
            ln -sfn $RELEASE_DIR $DEPLOY_PATH
            systemctl reload nginx
            echo \"✅ Beta deployed: $RELEASE_DIR\"
          "

      - name: 🏥 Health Check
        run: |
          sleep 10
          for i in {1..3}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://beta.saraivavision.com.br || echo "000")
            if [ "$RESPONSE" = "200" ]; then
              echo "✅ Health check $i/3 passed"
            else
              echo "❌ Health check $i/3 failed (HTTP $RESPONSE)"
              exit 1
            fi
            sleep 3
          done

      - name: 📊 Summary
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "### ✅ Beta Auto-Deploy Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://beta.saraivavision.com.br" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
