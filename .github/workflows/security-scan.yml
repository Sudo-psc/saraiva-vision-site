# Security Scanning Workflow
# Automated security checks on every push and pull request
# Runs: npm audit, Snyk, CodeQL, and dependency review

name: Security Scan

on:
  push:
    branches: [main, develop, feature/**]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scan daily at 2 AM (Brasília Time = 5 AM UTC)
    - cron: '0 5 * * *'
  workflow_dispatch: # Manual trigger

env:
  NODE_VERSION: '22.x'

# Prevent concurrent runs
concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: npm audit for known vulnerabilities
  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ['.', 'api']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.directory }}/package-lock.json

      - name: Run npm audit
        working-directory: ${{ matrix.directory }}
        run: |
          echo "🔍 Running npm audit for ${{ matrix.directory }}..."
          npm audit --audit-level=moderate --json > audit-report.json || true

          # Parse and display results
          cat audit-report.json | jq -r '
            "=== NPM Audit Report ===",
            "Critical: \(.metadata.vulnerabilities.critical)",
            "High: \(.metadata.vulnerabilities.high)",
            "Moderate: \(.metadata.vulnerabilities.moderate)",
            "Low: \(.metadata.vulnerabilities.low)",
            "Total: \(.metadata.vulnerabilities.total)"
          '

          # Fail if critical or high vulnerabilities found
          CRITICAL=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical')
          HIGH=$(cat audit-report.json | jq '.metadata.vulnerabilities.high')

          if [ "$CRITICAL" -gt "0" ] || [ "$HIGH" -gt "0" ]; then
            echo "❌ Security vulnerabilities found!"
            echo "::error::Found $CRITICAL critical and $HIGH high vulnerabilities - any high or critical vulnerability triggers failure"
            exit 1
          fi

          echo "✅ No critical security vulnerabilities found"

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-${{ matrix.directory }}
          path: ${{ matrix.directory }}/audit-report.json
          retention-days: 30

  # Job 2: Dependency review (PR only)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # Job 3: CodeQL analysis
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # Job 4: Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for secret scanning

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@v3.82.8
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Job 5: OWASP Dependency Check
  owasp-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@v4.1.0
        with:
          project: 'Saraiva Vision'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check
          path: reports
          retention-days: 30

  # Job 6: Security headers check
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Check Security Headers
        run: |
          echo "🔍 Checking security headers for production..."

          # Check HSTS
          HSTS=$(curl -sI https://saraivavision.com.br | grep -i "strict-transport-security" || echo "MISSING")
          echo "HSTS: $HSTS"

          # Check CSP
          CSP=$(curl -sI https://saraivavision.com.br | grep -i "content-security-policy" || echo "MISSING")
          echo "CSP: $CSP"

          # Check X-Frame-Options
          XFO=$(curl -sI https://saraivavision.com.br | grep -i "x-frame-options" || echo "MISSING")
          echo "X-Frame-Options: $XFO"

          # Check X-Content-Type-Options
          XCTO=$(curl -sI https://saraivavision.com.br | grep -i "x-content-type-options" || echo "MISSING")
          echo "X-Content-Type-Options: $XCTO"

          # Fail if critical headers missing
          if [[ "$HSTS" == "MISSING" ]] || [[ "$CSP" == "MISSING" ]]; then
            echo "❌ Critical security headers missing!"
            exit 1
          fi

          echo "✅ Security headers validated"

  # Job 7: Aggregate results and notify
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [npm-audit, codeql, secret-scan, owasp-check]
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "# 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- NPM Audit: ${{ needs.npm-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- OWASP Check: ${{ needs.owasp-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [[ "${{ needs.npm-audit.result }}" == "failure" ]] || \
             [[ "${{ needs.codeql.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.owasp-check.result }}" == "failure" ]]; then
            echo "## ❌ Security Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "Review the job logs for details and take immediate action." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ✅ All Security Checks Passed" >> $GITHUB_STEP_SUMMARY
            echo "No critical security issues detected." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Security scan detected critical issues. Please review immediately."
