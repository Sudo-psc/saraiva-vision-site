# Docker Compose Production Configuration for Saraiva Vision
# Medical Website Stack - Production Ready
version: '3.8'

# Define networks for service isolation
networks:
  frontend-network:
    driver: bridge
    name: saraiva-frontend
  backend-network:
    driver: bridge
    name: saraiva-backend

# Shared volumes for persistent data
volumes:
  wordpress-data:
    name: saraiva-wordpress-data
    driver: local
  nginx-cache:
    name: saraiva-nginx-cache
    driver: local
  mysql-data:
    name: saraiva-mysql-data
    driver: local
  redis-data:
    name: saraiva-redis-data
    driver: local

services:
  # MySQL Database for WordPress
  mysql:
    image: mysql:8.0
    container_name: saraiva-mysql
    hostname: mysql
    restart: unless-stopped
    ports:
      - "3307:3306"
    networks:
      - backend-network
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-saraiva_root_2025}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-wordpress}
      MYSQL_USER: ${MYSQL_USER:-saraiva_wp}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-saraiva_wp_2025}
    volumes:
      - mysql-data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # WordPress CMS Container
  wordpress:
    image: wordpress:6.4-php8.2-fpm
    container_name: saraiva-wordpress
    hostname: wordpress
    restart: unless-stopped
    ports:
      - "8084:9000"
    networks:
      - backend-network
    volumes:
      - wordpress-data:/var/www/html
    environment:
      WORDPRESS_DB_HOST: mysql:3306
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE:-wordpress}
      WORDPRESS_DB_USER: ${MYSQL_USER:-saraiva_wp}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD:-saraiva_wp_2025}
      WORDPRESS_TABLE_PREFIX: wp_
      WORDPRESS_DEBUG: false
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_REDIS_HOST', 'redis');
        define('WP_REDIS_PORT', 6379);
        define('WP_CACHE', true);
        define('FORCE_SSL_ADMIN', true);
        define('WP_HOME', 'https://saraivavision.com.br');
        define('WP_SITEURL', 'https://saraivavision.com.br');
        define('WP_ALLOW_MULTISITE', false);
        define('DISALLOW_FILE_EDIT', true);
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "php-fpm -t || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    labels:
      - "com.saraivavision.service=wordpress"
      - "com.saraivavision.environment=production"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache for WordPress
  redis:
    image: redis:7.2-alpine
    container_name: saraiva-redis
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - backend-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Frontend React Application Container
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: saraiva-frontend
    hostname: frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - frontend-network
    environment:
      - NODE_ENV=production
      - DOCKER_CONTAINER=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.saraivavision.service=frontend"
      - "com.saraivavision.environment=production"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Backend Container
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: saraiva-api
    hostname: api
    restart: unless-stopped
    ports:
      - "3001:3001"
    networks:
      - frontend-network
      - backend-network
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - DOCKER_CONTAINER=true
      - WORDPRESS_API_URL=http://wordpress:9000/wp-json
      # Load from .env.production
      - VITE_GOOGLE_MAPS_API_KEY=${VITE_GOOGLE_MAPS_API_KEY}
      - VITE_GOOGLE_PLACE_ID=${VITE_GOOGLE_PLACE_ID}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - GTM_ID=${GTM_ID}
      - RESEND_API_KEY=${RESEND_API_KEY}
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      wordpress:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "com.saraivavision.service=api"
      - "com.saraivavision.environment=production"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy Container
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
      target: production
    container_name: saraiva-nginx
    hostname: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend-network
      - backend-network
    volumes:
      - ./nginx-configs:/etc/nginx/conf.d:ro
      - ./nginx-configs/includes:/etc/nginx/nginx-configs/includes:ro
      - nginx-cache:/var/cache/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    environment:
      - NGINX_FRONTEND_HOST=frontend
      - NGINX_API_HOST=api
      - NGINX_WORDPRESS_HOST=wordpress
      - DOCKER_CONTAINER=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
      wordpress:
        condition: service_healthy
    labels:
      - "com.saraivavision.service=nginx"
      - "com.saraivavision.environment=production"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: saraiva-certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email philipe_cruz@outlook.com --agree-tos --no-eff-email -d saraivavision.com.br -d www.saraivavision.com.br
    depends_on:
      - nginx
    profiles:
      - ssl-setup

# Health check and monitoring
x-health-check: &health-check
  interval: 30s
  timeout: 10s
  retries: 3

# Common environment variables
x-common-env: &common-env
  DOCKER_CONTAINER: "true"
  TZ: "America/Sao_Paulo"
