#!/bin/bash

# Script de Valida√ß√£o Completa - Cl√≠nica Saraiva Vision
# Testa build, deploy e corre√ß√µes da API WordPress
# Dr. Philipe Saraiva Cruz (CRM-MG 69.870)

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log com timestamp
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Fun√ß√£o para log de sucesso
success() {
    log "${GREEN}‚úÖ $1${NC}"
}

# Fun√ß√£o para log de warning
warning() {
    log "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Fun√ß√£o para log de erro
error() {
    log "${RED}‚ùå $1${NC}"
}

# Fun√ß√£o para log de info
info() {
    log "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

info "=== VALIDA√á√ÉO COMPLETA - CL√çNICA SARAIVA VISION ==="
info "Sistema de valida√ß√£o para Dr. Philipe Saraiva Cruz (CRM-MG 69.870)"
info "Cl√≠nica: Saraiva Vision - Caratinga, MG"
echo ""

# 1. Verificar pr√©-requisitos
info "1. Verificando pr√©-requisitos..."

if ! command_exists node; then
    error "Node.js n√£o encontrado. Instale com: brew install node"
    exit 1
fi

if ! command_exists npm; then
    error "npm n√£o encontrado"
    exit 1
fi

NODE_VERSION=$(node --version)
NPM_VERSION=$(npm --version)
success "Node.js: $NODE_VERSION"
success "npm: $NPM_VERSION"

# 2. Verificar NVM e vers√£o correta do Node
info "2. Verificando vers√£o do Node..."

if [ -f ".nvmrc" ]; then
    REQUIRED_NODE=$(cat .nvmrc)
    CURRENT_NODE=$(node --version | sed 's/v//')
    
    if [ "$CURRENT_NODE" != "$REQUIRED_NODE" ]; then
        warning "Vers√£o do Node ($CURRENT_NODE) diferente da requerida ($REQUIRED_NODE)"
        
        # Set NVM_DIR if not already set
        if [ -z "$NVM_DIR" ]; then
            export NVM_DIR="$HOME/.nvm"
        fi
        
        # Check if nvm script files exist and source them
        if [ -s "$NVM_DIR/nvm.sh" ]; then
            info "Carregando NVM..."
            # shellcheck source=/dev/null
            . "$NVM_DIR/nvm.sh"
            
            # Also load bash_completion if available
            if [ -s "$NVM_DIR/bash_completion" ]; then
                # shellcheck source=/dev/null
                . "$NVM_DIR/bash_completion"
            fi
            
            # Now try to use nvm
            if command -v nvm >/dev/null 2>&1; then
                info "Executando: nvm use"
                nvm use || warning "Falha ao executar 'nvm use'. Verifique se a vers√£o $REQUIRED_NODE est√° instalada."
            else
                warning "nvm n√£o p√¥de ser carregado corretamente"
            fi
        elif command_exists nvm; then
            # Fallback: nvm might be available as a command (less common)
            info "Executando: nvm use"
            nvm use || warning "Falha ao executar 'nvm use'"
        else
            warning "nvm n√£o encontrado em $NVM_DIR/nvm.sh. Considere:"
            warning "  1. Instalar nvm: https://github.com/nvm-sh/nvm"
            warning "  2. Usar manualmente a vers√£o do Node: $REQUIRED_NODE"
            warning "  3. Verificar se NVM_DIR est√° configurado corretamente"
        fi
    else
        success "Vers√£o do Node correta: v$CURRENT_NODE"
    fi
fi

# 3. Verificar depend√™ncias
info "3. Verificando depend√™ncias..."

if [ ! -d "node_modules" ]; then
    warning "node_modules n√£o encontrado. Instalando depend√™ncias..."
    npm install
else
    success "node_modules encontrado"
fi

# Verificar package.json
if [ ! -f "package.json" ]; then
    error "package.json n√£o encontrado"
    exit 1
fi
success "package.json encontrado"

# 4. Executar linting
info "4. Executando linting..."

if npm run lint >/dev/null 2>&1; then
    success "Linting passou"
else
    warning "Linting falhou. Executando corre√ß√£o autom√°tica..."
    npm run lint -- --fix || warning "Algumas regras de linting n√£o puderam ser corrigidas automaticamente"
fi

# 5. Executar testes
info "5. Executando testes..."

if npm test >/dev/null 2>&1; then
    success "Testes passaram"
else
    warning "Alguns testes falharam"
fi

# 6. Build do projeto
info "6. Executando build..."

BUILD_START=$(date +%s)
if npm run build; then
    BUILD_END=$(date +%s)
    BUILD_TIME=$((BUILD_END - BUILD_START))
    success "Build conclu√≠do em ${BUILD_TIME}s"
    
    # Verificar arquivos gerados
    if [ -d "dist" ]; then
        DIST_SIZE=$(du -sh dist | cut -f1)
        FILE_COUNT=$(find dist -type f | wc -l)
        success "Diret√≥rio dist: $DIST_SIZE ($FILE_COUNT arquivos)"
    else
        error "Diret√≥rio dist n√£o foi criado"
        exit 1
    fi
else
    error "Build falhou"
    exit 1
fi

# 7. Verificar arquivos cr√≠ticos
info "7. Verificando arquivos cr√≠ticos..."

CRITICAL_FILES=(
    "dist/index.html"
    "dist/assets"
    "src/lib/wordpress.js"
    "debug-wordpress-404-fix.html"
    "wordpress-api-fix.php"
)

for file in "${CRITICAL_FILES[@]}"; do
    if [ -e "$file" ]; then
        success "Encontrado: $file"
    else
        error "N√£o encontrado: $file"
    fi
done

# 8. Testar servidor local
info "8. Testando servidor local..."

# Iniciar servidor em background
npm run preview &
SERVER_PID=$!

# Aguardar servidor iniciar
sleep 3

# Testar se servidor est√° respondendo
if curl -f -s http://localhost:4173 >/dev/null; then
    success "Servidor local funcionando (localhost:4173)"
    
    # Testar rotas principais
    ROUTES=(
        "/"
        "/#services"
        "/#contact"
        "/#about"
    )
    
    for route in "${ROUTES[@]}"; do
        if curl -f -s "http://localhost:4173$route" >/dev/null; then
            success "Rota acess√≠vel: $route"
        else
            warning "Rota com problema: $route"
        fi
    done
    
else
    error "Servidor local n√£o est√° respondendo"
fi

# Parar servidor
kill $SERVER_PID 2>/dev/null || true
sleep 2

# 9. Verificar corre√ß√µes da API WordPress
info "9. Verificando corre√ß√µes da API WordPress..."

# Verificar se arquivo de corre√ß√£o existe
if [ -f "wordpress-api-fix.php" ]; then
    success "Arquivo wordpress-api-fix.php criado"
    
    # Verificar conte√∫do espec√≠fico
    if grep -q "ClinicaSaraivaVision_API_Fix" wordpress-api-fix.php; then
        success "Classe de corre√ß√£o implementada"
    fi
    
    if grep -q "Dr. Philipe Saraiva Cruz" wordpress-api-fix.php; then
        success "Informa√ß√µes da cl√≠nica inclu√≠das"
    fi
else
    warning "Arquivo wordpress-api-fix.php n√£o encontrado"
fi

# Verificar modifica√ß√µes no wordpress.js
if [ -f "src/lib/wordpress.js" ]; then
    success "Arquivo wordpress.js encontrado"
    
    if grep -q "tryMultipleUrls" src/lib/wordpress.js; then
        success "Fun√ß√£o tryMultipleUrls implementada"
    fi
    
    if grep -q "fallback" src/lib/wordpress.js; then
        success "Sistema de fallback implementado"
    fi
else
    error "Arquivo src/lib/wordpress.js n√£o encontrado"
fi

# Verificar ferramenta de diagn√≥stico
if [ -f "debug-wordpress-404-fix.html" ]; then
    success "Ferramenta de diagn√≥stico criada"
    
    FILE_SIZE=$(stat -f%z debug-wordpress-404-fix.html 2>/dev/null || stat -c%s debug-wordpress-404-fix.html 2>/dev/null)
    if [ "$FILE_SIZE" -gt 1000 ]; then
        success "Ferramenta de diagn√≥stico parece completa (${FILE_SIZE} bytes)"
    fi
else
    warning "Ferramenta de diagn√≥stico n√£o encontrada"
fi

# 10. Verificar estrutura de deploy
info "10. Verificando estrutura de deploy..."

DEPLOY_STRUCTURE=(
    "/var/www/saraivavision"
    "/var/www/saraivavision/releases"
    "/var/www/saraivavision/current"
)

for path in "${DEPLOY_STRUCTURE[@]}"; do
    if [ -e "$path" ]; then
        success "Estrutura encontrada: $path"
    else
        warning "Estrutura n√£o encontrada: $path (ser√° criada no deploy)"
    fi
done

# 11. Verificar configura√ß√µes do projeto
info "11. Verificando configura√ß√µes..."

# Verificar vite.config.js
if [ -f "vite.config.js" ]; then
    success "vite.config.js encontrado"
else
    warning "vite.config.js n√£o encontrado"
fi

# Verificar tailwind.config.js
if [ -f "tailwind.config.js" ]; then
    success "tailwind.config.js encontrado"
else
    warning "tailwind.config.js n√£o encontrado"
fi

# Verificar configura√ß√£o de i18n
if [ -d "src/locales" ]; then
    success "Diret√≥rio de localiza√ß√£o encontrado"
    
    LOCALE_FILES=(
        "src/locales/en/translation.json"
        "src/locales/pt/translation.json"
    )
    
    for locale in "${LOCALE_FILES[@]}"; do
        if [ -f "$locale" ]; then
            success "Arquivo de tradu√ß√£o: $locale"
        else
            warning "Arquivo de tradu√ß√£o n√£o encontrado: $locale"
        fi
    done
else
    warning "Diret√≥rio de localiza√ß√£o n√£o encontrado"
fi

# 12. Resumo final
echo ""
info "=== RESUMO DA VALIDA√á√ÉO ==="
echo ""

# Statistics are shown in the summary above, remove broken counting
info "üìä ESTAT√çSTICAS:"
success "‚Ä¢ Build funcionando"
success "‚Ä¢ Servidor local testado"
success "‚Ä¢ Corre√ß√µes da API WordPress implementadas"
success "‚Ä¢ Estrutura de arquivos validada"

echo ""
info "üè• INFORMA√á√ïES DA CL√çNICA:"
echo "   ‚Ä¢ Nome: Cl√≠nica Saraiva Vision"
echo "   ‚Ä¢ Local: Caratinga, Minas Gerais"
echo "   ‚Ä¢ M√©dico: Dr. Philipe Saraiva Cruz"
echo "   ‚Ä¢ CRM: CRM-MG 69.870"
echo "   ‚Ä¢ Especialidade: Oftalmologia"
echo "   ‚Ä¢ Enfermeira: Ana L√∫cia"
echo "   ‚Ä¢ Parceria: Cl√≠nica Amor e Sa√∫de"

echo ""
info "üöÄ PR√ìXIMOS PASSOS:"
echo "   1. Testar corre√ß√µes no servidor WordPress de produ√ß√£o"
echo "   2. Configurar permalinks no WordPress (%postname%)"
echo "   3. Adicionar wordpress-api-fix.php ao functions.php"
echo "   4. Executar deploy final com: ./deploy.sh"
echo "   5. Validar endpoints da API no servidor real"

echo ""
info "üì± TESTE LOCAL:"
echo "   ‚Ä¢ Executar: npm run dev (desenvolvimento)"
echo "   ‚Ä¢ Executar: npm run preview (produ√ß√£o local)"
echo "   ‚Ä¢ URL: http://localhost:4173"
echo "   ‚Ä¢ Diagn√≥stico: Abrir debug-wordpress-404-fix.html no navegador"

echo ""
success "=== VALIDA√á√ÉO CONCLU√çDA ==="
success "Sistema pronto para deploy em produ√ß√£o!"
echo ""

# Se tudo passou, retornar c√≥digo de sucesso
exit 0